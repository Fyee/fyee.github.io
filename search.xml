<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>终端常用工具命令</title>
    <url>/2020/12/08/BasicTerminalCommand/</url>
    <content><![CDATA[<p>grep,awk,sed,lsof,curl,wget,tail,head,less,find,ssh,kill命令详解(更新中。。。)</p>
<a id="more"></a>
<h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>Linux grep 命令用于查找文件里符合条件的字符串。<br>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。<br>若不指定任何文件名称，或是所给予的文件名为 <code>-</code>，则 grep 指令会从标准输入设备读取数据。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> --help
使用: <span class="token function">grep</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. PATTERN <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.
Search <span class="token keyword">for</span> <span class="token for-or-select variable">PATTERN</span> <span class="token keyword">in</span> each FILE or standard input.
PATTERN is, by default, a basic regular expression <span class="token punctuation">(</span>BRE<span class="token punctuation">)</span>.
示例: <span class="token function">grep</span> -i <span class="token string">'hello world'</span> menu.h main.c
PATTERN:要匹配的内容

Regexp selection and interpretation:
  -E, --extended-regexp     PATTERN 扩展正则表达式 <span class="token punctuation">(</span>ERE<span class="token punctuation">)</span>
  -F, --fixed-strings       PATTERN is a <span class="token builtin class-name">set</span> of newline-separated fixed strings
  -G, --basic-regexp        PATTERN 基本的正则表达式 <span class="token punctuation">(</span>BRE<span class="token punctuation">)</span>
  -P, --perl-regexp         PATTERN Perl 正则表达式
  -e, --regexp<span class="token operator">=</span>PATTERN      使用 PATTERN 来匹配
  -f, --file<span class="token operator">=</span>FILE           从文件获取PATTERN
  -i, --ignore-case         忽略大小写差异
  -w, --word-regexp         强制匹配整个单词
  -x, --line-regexp         强制匹配一整行的内容
  -z, --null-data           a data line ends <span class="token keyword">in</span> <span class="token number">0</span> byte, not newline

Miscellaneous:
  -s, --no-messages         不显示错误信息
  -v, --invert-match        显示不包含匹配文本的所有行
  -V, --version             显示版本信息
      --help                显示帮助信息

Output control:
  -m, --max-count<span class="token operator">=</span>NUM       限制最大匹配的数量
  -b, --byte-offset         在显示符合样式的那一行之前，标示出该行第一个字符的编号
  -n, --line-number         在显示符合样式的那一行之前，标示出该行的列数编号
      --line-buffered       flush output on every line
  -H, --with-filename       在显示符合样式的那一行之前，表示该行所属的文件名称
  -h, --no-filename         suppress the <span class="token function">file</span> name prefix on output
      --label<span class="token operator">=</span>LABEL         use LABEL as the standard input <span class="token function">file</span> name prefix
  -o, --only-matching       只显示匹配PATTERN的部分
  -q, --quiet, --silent     不显示任何信息
      --binary-files<span class="token operator">=</span>TYPE   assume that binary files are TYPE<span class="token punctuation">;</span>
                            TYPE is <span class="token string">'binary'</span>, <span class="token string">'text'</span>, or <span class="token string">'without-match'</span>
  -a, --text                不要忽略二进制的数据
  -I                        列出文件内容符合指定的样式的文件名称
  -d, --directories<span class="token operator">=</span>ACTION  当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作
                            ACTION is <span class="token string">'read'</span>, <span class="token string">'recurse'</span>, or <span class="token string">'skip'</span>
  -D, --devices<span class="token operator">=</span>ACTION      how to handle devices, FIFOs and sockets<span class="token punctuation">;</span>
                            ACTION is <span class="token string">'read'</span> or <span class="token string">'skip'</span>
  -r, --recursive           等价于 --directories<span class="token operator">=</span>recurse 递归查找文件夹下的所有文件
  -R, --dereference-recursive
                            likewise, but follow all symlinks
      --include<span class="token operator">=</span>FILE_PATTERN
                            search only files that match FILE_PATTERN
      --exclude<span class="token operator">=</span>FILE_PATTERN
                            skip files and directories matching FILE_PATTERN
      --exclude-from<span class="token operator">=</span>FILE   skip files matching any <span class="token function">file</span> pattern from FILE
      --exclude-dir<span class="token operator">=</span>PATTERN directories that match PATTERN will be skipped.
  -L, --files-without-match 列出文件内容不符合指定的样式的文件名称
  -l, --files-with-matches  列出文件内容符合指定的样式的文件名称
  -c, --count               显示匹配的数量
  -T, --initial-tab         <span class="token function">make</span> tabs line up <span class="token punctuation">(</span>if needed<span class="token punctuation">)</span>
  -Z, --null                print <span class="token number">0</span> byte after FILE name

Context control:
  -B, --before-context<span class="token operator">=</span>NUM  列出匹配的内容之前的几行内容
  -A, --after-context<span class="token operator">=</span>NUM   列出匹配的内容之后的几行内容
  -C, --context<span class="token operator">=</span>NUM         列出匹配的内容前后几行的内容
  -NUM                      same as --context<span class="token operator">=</span>NUM
      --group-separator<span class="token operator">=</span>SEP use SEP as a group separator
      --no-group-separator  use empty string as a group separator
      --color<span class="token punctuation">[</span><span class="token operator">=</span>WHEN<span class="token punctuation">]</span>,
      --colour<span class="token punctuation">[</span><span class="token operator">=</span>WHEN<span class="token punctuation">]</span>       use markers to highlight the matching strings<span class="token punctuation">;</span>
                            WHEN is <span class="token string">'always'</span>, <span class="token string">'never'</span>, or <span class="token string">'auto'</span>
  -U, --binary              <span class="token keyword">do</span> not strip CR characters at EOL <span class="token punctuation">(</span>MSDOS/Windows<span class="token punctuation">)</span>
  -u, --unix-byte-offsets   report offsets as <span class="token keyword">if</span> CRs were not there
                            <span class="token punctuation">(</span>MSDOS/Windows<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>查找test1.txt文件中的数字<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> -i <span class="token string">"^[0-9]*$"</span> test1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>查找test1.txt中包含test的文本<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> -i <span class="token builtin class-name">test</span> test1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>显示test1.txt文本中匹配了test的后2行内容<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> -i <span class="token builtin class-name">test</span> -A <span class="token number">2</span> test1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>递归查找<code>/home/command_test/</code>目录下包含test文本的文件及内容<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> -i <span class="token builtin class-name">test</span> -r /home/command_test/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h2 id="awk命令"><a href="#awk命令" class="headerlink" title="awk命令"></a>awk命令</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。<br>之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p>
<p>Usage: awk [POSIX or GNU style options] -f progfile [–] file …<br>Usage: awk [POSIX or GNU style options] [–] ‘program’ file …<br>POSIX options:          GNU long options: (standard)<br>        -f progfile             –file=progfile<br>        -F fs                   –field-separator=fs<br>        -v var=val              –assign=var=val<br>Short options:          GNU long options: (extensions)<br>        -b                      –characters-as-bytes<br>        -c                      –traditional<br>        -C                      –copyright<br>        -d[file]                –dump-variables[=file]<br>        -e ‘program-text’       –source=’program-text’<br>        -E file                 –exec=file<br>        -g                      –gen-pot<br>        -h                      –help<br>        -L [fatal]              –lint[=fatal]<br>        -n                      –non-decimal-data<br>        -N                      –use-lc-numeric<br>        -O                      –optimize<br>        -p[file]                –profile[=file]<br>        -P                      –posix<br>        -r                      –re-interval<br>        -S                      –sandbox<br>        -t                      –lint-old<br>        -V                      –version</p>
<h2 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h2><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p>sed 是利用脚本来处理文本文件。<br>sed 可依照脚本的指令来处理、编辑文本文件。<br>sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>终端基本操作命令</title>
    <url>/2020/12/08/BasicTerminalOperation/</url>
    <content><![CDATA[<p>终端Bash的一些日常操作,命令查找,光标控制等（更新中。。。）</p>
<a id="more"></a>
<p>参考<a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">the-art-of-command-line</a></p>
<ul>
<li>搜索命令行历史记录: <code>ctrl-r</code><br>使用 <code>ctrl-r</code> 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 <code>ctrl-r</code> 会向后查找匹配项，按下 <code>Enter</code> 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）</li>
<li>删除你键入的最后一个单词: <code>ctrl-w</code></li>
<li>删除行内光标所在位置之前的内容: <code>ctrl-u</code></li>
<li>以单词为单位移动光标: <code>alt-b</code> 和 <code>alt-f</code></li>
<li>光标移至行首: <code>ctrl-a</code></li>
<li>光标移至行尾: <code>ctrl-e</code></li>
<li>删除光标至行尾的所有内容: <code>ctrl-k</code></li>
<li>清屏: <code>ctrl-l</code> 或 <code>clear</code></li>
<li>键入 man readline 可以查看 Bash 中的默认快捷键。内容有很多，例如 alt-. 循环地移向前一个参数，而 alt-* 可以展开通配符。</li>
<li>键入 history 查看命令行历史记录，再用 !n（n 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 !$， 它用于指代上次键入的参数，而 !! 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 ctrl-r 和 alt-. 来实现。</li>
<li>cd 命令可以切换工作路径，输入 cd ~ 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 ~（例如 ~/.bashrc）。在 sh 脚本里则用环境变量 $HOME 指代 home 目录的路径。</li>
<li>回到前一个工作路径：cd -</li>
<li>如果你输入命令的时候中途改了主意，按下 <code>alt-#</code> 在行首添加 # 把它当做注释再按下回车执行（或者依次按下 <code>ctrl-a</code>， <code>#</code>， <code>enter</code>）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。</li>
<li>展示进程树: <code>pstree -p</code></li>
<li>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（-f 参数通常有用）</li>
<li>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code>停止一个进程。使用 <code>man 7 signal</code> 查看详细列表.</li>
<li>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行</li>
<li>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 -u 则检查 UDP 端口）或者 lsof -iTCP -sTCP:LISTEN -P -n (这也可以在 OS X 上运行)。</li>
<li>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</li>
<li>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 创建了一个新的命令别名 <code>ll</code>。</li>
<li>可以把别名、shell 选项和常用函数保存在 <code>~/.bashrc</code></li>
<li>要想在几台电脑中同步你的配置文件（例如 <code>.bashrc</code> 和 <code>.bash_profile</code>），可以借助 Git。</li>
<li>在 Bash 中，同时重定向标准输出和标准错误：<code>some-command &gt;logfile 2&gt;&amp;1 </code>或者 <code>some-command &amp;&gt;logfile</code>。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 <code>&lt;/dev/null</code> 是一个好习惯。</li>
<li>对 ssh 设置做一些小优化可能是很有用的，例如这个 ~/.ssh/config 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">TCPKeepAlive&#x3D;yes
ServerAliveInterval&#x3D;15
ServerAliveCountMax&#x3D;6
Compression&#x3D;yes
ControlMaster&#x3D;auto
ControlPath&#x3D;&#x2F;tmp&#x2F;%r@%h:%p
ControlPersist&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 <code>StrictHostKeyChecking=no</code>，<code>ForwardAgent=yes</code>。</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos相关的操作</title>
    <url>/2020/12/06/Centos/</url>
    <content><![CDATA[<p>Centos一些常用操作，端口开启，虚拟机设置等</p>
<a id="more"></a>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><ol>
<li>快速格式化代码<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//移动光标至顶行
gg 
//选择模式
shift+v 
//移动光标到最尾行（全选）
G 
//立马格式化
<span class="token operator">=</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ol>
<h2 id="虚拟机最小化安装后联网设置"><a href="#虚拟机最小化安装后联网设置" class="headerlink" title="虚拟机最小化安装后联网设置"></a>虚拟机最小化安装后联网设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/sysconfig/network-scipts
<span class="token function">vi</span> ifcfg-eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>修改ONBOOT=yes后保存</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">ONBOOT</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>重启网络</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Centos8使用这个命令</p>
<pre class="line-numbers language-none"><code class="language-none">nmcli c reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul>
<li>yum安装<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token function">git</span> -y
<span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>yum安装的版本低，在此基础上升级<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>下载安装包<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/git/git/archive/v2.27.0.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>解压&amp;进入目录<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> v2.27.0.zip
<span class="token builtin class-name">cd</span> git-2.27.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>编译安装<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token assign-left variable">prefix</span><span class="token operator">=</span>/usr/local/git all
<span class="token function">make</span> <span class="token assign-left variable">prefix</span><span class="token operator">=</span>/usr/local/git <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>替换yum安装时的路径<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf /usr/bin/git
<span class="token function">ln</span> -s /usr/local/git/bin/git /usr/bin/git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>重新查看版本<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
git version 2.27.0</li>
</ul>
<h2 id="端口开放"><a href="#端口开放" class="headerlink" title="端口开放"></a>端口开放</h2><ul>
<li><p>查看已打开的端口 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -anp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看指定端口是否已开 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --query-port<span class="token operator">=</span><span class="token number">666</span>/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>若此提示 Firewall is not running 表示没有开启防火墙，需要查看防火墙状态。</p>
</li>
<li><p>查看防火墙状态  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>running 状态即防火墙已经开启<br>dead 状态即防火墙未开启</p>
</li>
<li><p>开启防火墙</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start firewalld
<span class="token comment">#老版本命令</span>
<span class="token function">service</span> firewalld start  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>没有任何提示即开启成功</p>
</li>
<li><p>关闭防火墙 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>centos7.3 上述方式可能无法开启，<br>可以先</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl unmask firewalld.service <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看想开的端口是否已开 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --query-port<span class="token operator">=</span><span class="token number">666</span>/tcp    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>提示no表示未开</p>
</li>
<li><p>开起永久端口号 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --add-port<span class="token operator">=</span><span class="token number">666</span>/tcp --permanent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>提示success表示成功</p>
</li>
<li><p>重新载入配置<br>注意<br>添加规则之后，需要执行此命令</p>
</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --reload  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<ul>
<li><p>再次查看想开的端口是否已开  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --query-port<span class="token operator">=</span><span class="token number">666</span>/tcp  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>提示yes表示成功</p>
</li>
<li><p>若移除端口 </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --permanent --remove-port<span class="token operator">=</span><span class="token number">666</span>/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>修改iptables  有些版本需要安装iptables-services </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> iptables-services <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后进目录修改</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/sysconfig/iptables  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>修改内容</p>
</li>
<li><p>批量开放端口</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">100</span>-500/tcp
firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">100</span>-500/udp
firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="查找并清理大文件"><a href="#查找并清理大文件" class="headerlink" title="查找并清理大文件"></a>查找并清理大文件</h2></li>
<li><p>命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> -h --max-depth<span class="token operator">=</span>1du<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>参数说明<br>用于统计linux中文件或目录所占磁盘空间的大小du参数<br>m：以M为单位展示查询结果<br>&#45;h：以K、M、G为单位展示查询结果，提高信息可读性<br>&#45;&#45;max-depth=1：其中，数字“1”是指查询结果中最多显示的目录层数，这里指最多显示一层目录。  </p>
</li>
<li><p>清空内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#此命令会把/var/log目录中的big.log文件内容清除，而又不删除big.log文件</span>
<span class="token builtin class-name">echo</span> <span class="token operator">></span> /var/log/big.log
<span class="token comment">#此命令能与"echo > /var/log/big.log"达到相同效果，不过，命令执行后，需要用"Ctrl + d"结束</span>
<span class="token function">cat</span> <span class="token operator">></span> /var/log/big.log
<span class="token comment">#此命令会把big.log文件内容清空，而不删除文件</span>
<span class="token function">clear</span> <span class="token operator">></span> /var/log/big.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="水印图片乱码问题"><a href="#水印图片乱码问题" class="headerlink" title="水印图片乱码问题"></a>水印图片乱码问题</h2><p>Centos没有中文字体导致java程序生成的中文水印图片文字乱码（不显示），可以将windows中的中文字体复制到centos中，或者在网上找到免费并且没有版权的中文字体，安装即可。</p>
<ul>
<li>下载字体后，进入目录,创建自己的字体目录<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/share/fonts/
<span class="token function">mkdir</span> myfonts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>将下载好的字体上传到myfonts目录下，安装字体<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkfontscale
mkfontdir
fc-cache -fv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>查看安装好的字体<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fc-list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>重启java服务，再次生成的图片水印图片已经正常显示中文</li>
</ul>
<h2 id="免密登陆"><a href="#免密登陆" class="headerlink" title="免密登陆"></a>免密登陆</h2><ul>
<li>执行命令,并输入密码</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ssh-copy-id root@192.168.2.23</span>
ssh-copy-id user@host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>第二次登陆就不需要输入密码了</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ssh root@192.168.2.23</span>
<span class="token function">ssh</span> user@host<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="清除buffer-cache"><a href="#清除buffer-cache" class="headerlink" title="清除buffer/cache"></a>清除buffer/cache</h2><p><a href="https://linux.cn/article-5627-1.html">原文链接</a><br>提示<br>生产环境建议使用<code>echo 1</code>，不建议使用<code>echo 3</code></p>
<ol>
<li>仅清除页面缓存（PageCache）<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sync</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">></span> /proc/sys/vm/drop_caches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>清除目录项和inode<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sync</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token number">2</span> <span class="token operator">></span> /proc/sys/vm/drop_caches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>清除页面缓存，目录项和inode<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sync</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token number">3</span> <span class="token operator">></span> /proc/sys/vm/drop_caches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ol>
<h2 id="VMware虚拟机下Centos扩容"><a href="#VMware虚拟机下Centos扩容" class="headerlink" title="VMware虚拟机下Centos扩容"></a>VMware虚拟机下Centos扩容</h2><ol>
<li>首先在<code>Vmware</code>中设置磁盘扩容的大小<br><img src="/2020/12/06/Centos/vm.png"></li>
<li>使用<code>fdisk</code>命令添加新的分区</li>
</ol>
<ul>
<li><p>查看当前系统已有分区</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>挂在新的分区</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> /dev/sda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>命令说明</p>
<pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# fdisk &#x2F;dev&#x2F;sda
　　Command (m for help): 在这里按m ，就会输出帮助；
　　Command action
　　a toggle a bootable flag
　　b edit bsd disklabel
　　c toggle the dos compatibility flag
　　d delete a partition 注：这是删除一个分区的动作；
　　l list known partition types 注：l是列出分区类型，以供我们设置相应分区的类型；
　　m print this menu 注：m 是列出帮助信息；
　　n add a new partition 注：添加一个分区；
　　o create a new empty DOS partition table
　　p print the partition table 注：p列出分区表；
　　q quit without saving changes 注：不保存退出；
　　s create a new empty Sun disklabel
　　t change a partition&#39;s system id 注：t 改变分区类型；
　　u change display&#x2F;entry units
　　v verify the partition table
　　w write table to disk and exit 注：把分区表写入硬盘并退出；
　　x extra functionality (experts only) 注：扩展应用，专家功能；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>步骤截图<br><img src="/2020/12/06/Centos/disk.png"><br>操作完成后重启系统<code>reboot</code>,重启后再次使用命令<code>fdisk -l</code>可以看到新的磁盘<code>/dev/sda3</code>已经挂载</p>
</li>
</ul>
<ol start="3">
<li><p>格式化新挂载的磁盘</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkfs.ext3 /dev/sda3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>查看需要挂载的磁盘名称<br>使用<code>df -lh</code>命令查看当前磁盘空间占用，找到自己需要扩容的磁盘名称</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -lh</span>
Filesystem               Size  Used Avail Use% Mounted on
devtmpfs                 <span class="token number">3</span>.8G     <span class="token number">0</span>  <span class="token number">3</span>.8G   <span class="token number">0</span>% /dev
tmpfs                    <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /dev/shm
tmpfs                    <span class="token number">3</span>.9G   12M  <span class="token number">3</span>.8G   <span class="token number">1</span>% /run
tmpfs                    <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /sys/fs/cgroup
/dev/mapper/centos-root   50G  <span class="token number">4</span>.7G   46G  <span class="token number">10</span>% /
/dev/mapper/centos-home   26G   26G  140K <span class="token number">100</span>% /home
/dev/sda1               1014M  238M  777M  <span class="token number">24</span>% /boot
tmpfs                    781M     <span class="token number">0</span>  781M   <span class="token number">0</span>% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>比如我要扩展的磁盘为<code>/dev/mapper/centos-home</code>,记住这个名字，在下面的步骤需要用到</p>
</li>
<li><p>使用lvm扩展分区</p>
</li>
</ol>
<ul>
<li>使用命令<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvm
<span class="token comment"># 创建物理卷</span>
pvcreate /dev/sda3
<span class="token comment"># 查看当前卷信息</span>
pvdisplay<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>将<code>/dev/sda3</code>加入的和<code>/dev/sda2</code>一样的VG Name中<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vgextend <span class="token operator">&lt;</span>你的VG Name<span class="token operator">></span> /dev/sda3
<span class="token comment"># 如vgextend centos /dev/sda3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>添加容量到你需要添加的磁盘中(第4步查看的磁盘名称)<br>为了防止出错这里的写199G比我添加的120G小<br>如：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lvextend -L +199G /dev/mapper/centos-home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/2020/12/06/Centos/add_disk.png"></li>
</ul>
<ol start="6">
<li>最后重新调整逻辑分区<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xfs_growfs /dev/mapper/centos-home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
执行成功后重新输入<code>df -lh</code>可以看到磁盘空间已经添加完成<br><img src="/2020/12/06/Centos/add_disk_completed.png"></li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装及Mysql容器</title>
    <url>/2020/12/04/Docker/</url>
    <content><![CDATA[<p>一些常用的容器快速启动的脚本，比如Mysql，每次重新去官网找文档太痛苦了o(╥﹏╥)o</p>
<a id="more"></a>
<h2 id="Docker安装-Centos"><a href="#Docker安装-Centos" class="headerlink" title="Docker安装(Centos)"></a>Docker安装(Centos)</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="官方地址"><a href="#官方地址" class="headerlink" title="官方地址"></a><a href="https://docs.docker.com/engine/install/centos/">官方地址</a></h4><p><code>docker</code>安装参考的是官方文档，如果翻译有误，请指正，谢谢！</p>
<h4 id="删除旧版本"><a href="#删除旧版本" class="headerlink" title="删除旧版本"></a>删除旧版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum remove docker <span class="token punctuation">\</span>
                  docker-client <span class="token punctuation">\</span>
                  docker-client-latest <span class="token punctuation">\</span>
                  docker-common <span class="token punctuation">\</span>
                  docker-latest <span class="token punctuation">\</span>
                  docker-latest-logrotate <span class="token punctuation">\</span>
                  docker-logrotate <span class="token punctuation">\</span>
                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils
<span class="token function">sudo</span> yum-config-manager <span class="token punctuation">\</span>
    --add-repo <span class="token punctuation">\</span>
    https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="可选步骤-可跳过"><a href="#可选步骤-可跳过" class="headerlink" title="可选步骤(可跳过)"></a>可选步骤(可跳过)</h4><p>开启test和nightly安装<br>这些仓库已经包含在<code>docker.repo</code>文件中，默认为禁用状态<br>以下命令开启nightly版本安装  </p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --enable docker-ce-nightly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以下命令开启test版本安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --enable docker-ce-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>你也可以通过使用命令 <code>yum-config-manager</code> 和 <code>--disable</code> 参数来禁用test或nightly版本安装<br>如果想开启则使用 <code>--enable</code>参数<br>示例</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --disable docker-ce-nightly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h4><ol>
<li><p>安装最新版本的docker引擎，或者参照第2步安装指定版本的docker</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行完命令后<code>docker</code>已经完成安装，但是还没有启动</p>
</li>
<li><p>安装指定版本的docker引擎</p>
</li>
</ol>
<ul>
<li>列出并排序您存储库中可用的<code>docker</code>版本，此示例按版本号（从高到低）对结果进行排序<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r

docker-ce.x86_64  <span class="token number">3</span>:18.09.1-3.el7                     docker-ce-stable
docker-ce.x86_64  <span class="token number">3</span>:18.09.0-3.el7                     docker-ce-stable
docker-ce.x86_64  <span class="token number">18.06</span>.1.ce-3.el7                    docker-ce-stable
docker-ce.x86_64  <span class="token number">18.06</span>.0.ce-3.el7                    docker-ce-stable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><code>VERSION_STRING</code>代表版本号，如：<code>docker-ce.x86_64  3:18.09.1-3.el7</code>，版本号为<code>18.09.1</code><br>从第一个<code>:</code>开始到<code>-</code>结束，这中间的为版本号<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce-<span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">></span> docker-ce-cli-<span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">></span> containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4></li>
<li>命令<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>验证是否安装成功，以<code>hello-world</code>镜像为例<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h3 id="修改Docker镜像源"><a href="#修改Docker镜像源" class="headerlink" title="修改Docker镜像源"></a>修改Docker镜像源</h3><ul>
<li><code>docker</code>默认的镜像源国内拉取镜像很慢，可以修改为国内镜像源，以下为网易镜像源，也可以<a href="https://www.baidu.com/">百度搜索</a>其他镜像源设置<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token string">"http://hub-mirror.c.163.com"</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>修改后需要重启<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3>Centos安装好后如果要使用<code>docker-compose</code>则需要单独安装一下，macos则不需要，安装包已经安装好了</li>
</ul>
<ol>
<li>运行以下命令下载当前稳定版本的Docker Compose:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> -L <span class="token string">"https://github.com/docker/compose/releases/download/1.26.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>"</span> -o /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>赋予可执行的权限<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>检查是否安装成功<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker-compose --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
显示版本号信息<code>docker-compose version 1.26.2, build 1110ad01</code>则安装成功 </li>
</ol>
<p>::: tip 提示<br>如果安装后<code>docker-compose</code>命令依然无法使用，检查一下环境变量，你也可以通过创建软连接的方式到 <code>/usr/bin</code>目录下，或者其它在环境变量中的目录<br>例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>:::</p>
<h3 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h3><p><a href="https://docs.docker.com/network/bridge/">官方地址</a></p>
<ol>
<li>使用<code>docker network create</code>创建用户自定义网络<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network create my-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>使用<code>docker network rm</code>删除自定义网络<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network <span class="token function">rm</span> my-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>使用自定义网络</li>
</ol>
<ul>
<li>创建容器时指定network<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker create --name my-nginx <span class="token punctuation">\</span>
 --network my-net <span class="token punctuation">\</span>
 --publish <span class="token number">8080</span>:80 <span class="token punctuation">\</span>
 nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>如果容器已经创建，通过此命令加入网络<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker network connect my-net my-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h2 id="Mysql容器"><a href="#Mysql容器" class="headerlink" title="Mysql容器"></a>Mysql容器</h2><ul>
<li>创建mysql容器</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run --name mysql8.0 <span class="token punctuation">\</span>
-e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token operator">&lt;</span>your_password<span class="token operator">></span> <span class="token punctuation">\</span>
-e <span class="token assign-left variable">MYSQL_ROOT_HOST</span><span class="token operator">=</span>% <span class="token punctuation">\</span>
-p <span class="token operator">&lt;</span>your_port<span class="token operator">></span>:3306 <span class="token punctuation">\</span>
-v <span class="token operator">&lt;</span>your_lib<span class="token operator">></span>:/var/lib/mysql <span class="token punctuation">\</span>
-d mysql:8.0.20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>设置mysql远程登录</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> -it <span class="token operator">&lt;</span>your_mysql_container_id<span class="token operator">></span> /bin/bash
mysql -u root -p
create user <span class="token string">'root'</span>@<span class="token string">'%'</span> identified by <span class="token string">'&lt;your_password>'</span><span class="token punctuation">;</span>
grant all privileges on *.* to <span class="token string">'root'</span>@<span class="token string">'%'</span> with grant option<span class="token punctuation">;</span>
flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Java运行镜像"><a href="#Java运行镜像" class="headerlink" title="Java运行镜像"></a>Java运行镜像</h2><ul>
<li>Dockerfile配置</li>
</ul>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token keyword">FROM</span> adoptopenjdk/openjdk8<span class="token punctuation">:</span>jre
<span class="token keyword">MAINTAINER</span> &lt;author_name<span class="token punctuation">></span>
<span class="token keyword">RUN</span> mkdir <span class="token punctuation">-</span>p &lt;workdir<span class="token punctuation">></span>
<span class="token keyword">WORKDIR</span> &lt;workdir<span class="token punctuation">></span>
<span class="token keyword">EXPOSE</span> 8081
<span class="token keyword">ADD</span> &lt;jar_package_path<span class="token punctuation">></span> ./app.jar
<span class="token keyword">ENTRYPOINT</span> <span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span> <span class="token string">"-Djava.security.egd=file:/dev/./urandom"</span><span class="token punctuation">,</span> <span class="token string">"-jar"</span><span class="token punctuation">,</span> <span class="token string">"app.jar"</span><span class="token punctuation">]</span>
<span class="token keyword">CMD</span> <span class="token punctuation">[</span><span class="token string">"--spring.profiles.active=prod"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>构建镜像<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker build -t <span class="token operator">&lt;</span>customer-image-name<span class="token operator">></span> <span class="token operator">&lt;</span>Dockerfile-path<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看容器日志</span>
docker logs --tail <span class="token operator">&lt;</span>line<span class="token operator">></span> <span class="token operator">&lt;</span>container-id<span class="token operator">></span>
docker logs -f <span class="token operator">&lt;</span>container-id<span class="token operator">></span>
<span class="token comment">#查看容器状态</span>
docker stats 
<span class="token comment">#查看容器当前状态</span>
docker stats --no-stream
<span class="token comment">#指定容器状态</span>
docker stats --no-stream registry <span class="token operator">&lt;</span>container-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Html自定义组件</title>
    <url>/2020/12/23/FrontComponent/</url>
    <content><![CDATA[<p>复用HTML组件，可以用这种方式创建自己的组件库。</p>
<a id="more"></a>
<p>参考链接：<a href="https://www.freecodecamp.org/news/reusable-html-components-how-to-reuse-a-header-and-footer-on-a-website/">Reusable HTML Components</a></p>
<ul>
<li><p>文件结构如下</p>
<pre class="line-numbers language-none"><code class="language-none">.
├── components
│   ├── footer.js
│   └── header.js
├── index.html
└── styles.css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>styles.css</code>文件</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">html, body</span> <span class="token punctuation">&#123;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">body</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">main</span> <span class="token punctuation">&#123;</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> 1 0 auto<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>index.html</code> 文件</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sha512-+4zCK9k+qNFUR5X+cKL9EIR+ZOhtIloNl9GIKS57V1MyNsYpYcUrUeQc9vNfzsWfV28IaLL3i96P9sdNyeRssA==<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>styles.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>components/header.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>components/footer.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">defer</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header-component</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- Your page's content --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer-component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer-component</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>header.js文件</p>
</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">
<span class="token keyword">const</span> headerTemplate <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
headerTemplate<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
  &lt;style>
    nav &#123;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      background-color:  #0a0a23;
    &#125;
    
    ul li &#123;
      list-style: none;
      display: inline;
    &#125;
    
    a &#123;
      font-weight: 700;
      margin: 0 25px;
      color: #fff;
      text-decoration: none;
    &#125;
    
    a:hover &#123;
      padding-bottom: 5px;
      box-shadow: inset 0 -2px 0 0 #fff;
    &#125;
  &lt;/style>
  &lt;header>
    &lt;nav>
      &lt;ul>
        &lt;li>&lt;a href="about.html">About&lt;/a>&lt;/li>
        &lt;li>&lt;a href="work.html">Work&lt;/a>&lt;/li>
        &lt;li>&lt;a href="contact.html">Contact&lt;/a>&lt;/li>
      &lt;/ul>
    &lt;/nav>
  &lt;/header>
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> shadowRoot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> mode<span class="token operator">:</span> <span class="token string">'closed'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        shadowRoot<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>headerTemplate<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'header-component'</span><span class="token punctuation">,</span> Header<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><p><code>footer.js</code>文件</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Footer</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;style>
        footer &#123;
          height: 60px;
          padding: 0 10px;
          list-style: none;
          display: flex;
          justify-content: space-between;
          align-items: center;
          background-color: #dfdfe2;
        &#125;
        
        ul li &#123;
          list-style: none;
          display: inline;
        &#125;
        
        a &#123;
          margin: 0 15px;
          color: inherit;
          text-decoration: none;
        &#125;
        
        a:hover &#123;
          padding-bottom: 5px;
          box-shadow: inset 0 -2px 0 0 #333;
        &#125;
        
        .social-row &#123;
          font-size: 20px;
        &#125;
        
        .social-row li a &#123;
          margin: 0 15px;
        &#125;
      &lt;/style>
      &lt;footer>
        &lt;ul>
          &lt;li>&lt;a href="about.html">About&lt;/a>&lt;/li>
          &lt;li>&lt;a href="work.html">Work&lt;/a>&lt;/li>
          &lt;li>&lt;a href="contact.html">Contact&lt;/a>&lt;/li>
        &lt;/ul>
        &lt;ul class="social-row">
          &lt;li>&lt;a href="https://github.com/my-github-profile">&lt;i class="fab fa-github">&lt;/i>&lt;/a>&lt;/li>
          &lt;li>&lt;a href="https://twitter.com/my-twitter-profile">&lt;i class="fab fa-twitter">&lt;/i>&lt;/a>&lt;/li>
          &lt;li>&lt;a href="https://www.linkedin.com/in/my-linkedin-profile">&lt;i class="fab fa-linkedin">&lt;/i>&lt;/a>&lt;/li>
        &lt;/ul>
      &lt;/footer>
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'footer-component'</span><span class="token punctuation">,</span> Footer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>浏览器打开index.html显示如下</p>
</li>
</ul>
<p><img src="/2020/12/23/FrontComponent/html.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>非覆盖式发布实践</title>
    <url>/2020/12/23/FrontPublish/</url>
    <content><![CDATA[<p>使用非覆盖的方式发布前端代码实践，可以保留历史版本包。以阿里云OSS和Vue项目实践。</p>
<a id="more"></a>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>参考文章：<a href="https://www.zhihu.com/question/20790576">大公司里怎样开发和部署前端代码</a><br>参考文章：<a href="https://ice.work/docs/guide/advance/publish">ice前端资源发布</a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>前端简单一点的发布方式就是每次将打包的文件放到服务器的一个目录下，通过nginx将入口文件<code>index.html</code>挂出来就可以了,以后每次更新只要将新包替换掉原来的包就可以了。<br>这种方式称为”覆盖式发布”，这样做简单，对于业务量不是很大，要求没那么严格的公司来说基本上够用了。<br>非覆盖式发布则是每次发包路径都是一个新的路径，通过版本号区别，比如原来的路径是 <code>1.0.0/static/index.js</code> 发新版本时路径根据版本号区分 <code>1.0.1/static/index.js</code>。<br>这样做的好处是旧文件还在，不用删除，如果上线了<code>1.0.1</code>发现有问题，也可以马上恢复到 <code>1.0.0</code>,也避免了线上用户正在操作时，旧的js文件被删除了，导致业务出现异常。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>按照参考文章里面的提示，我将index.html放在服务器上，静态资源，js,css等放到 oss上，通过http的方式访问静态资源，不用相对路径的方式。<br>资源的访问路径可以通过配置webpack的publicPath来修改,修改vue.config.js文件中的publicPath地址为我们oss外网访问地址+打包版本号<br>如下：<br><img src="/2020/12/23/FrontPublish/publicpath.png"></p>
<p>当然前提是在阿里的OSS上面先建好自己的bucket,然后得到bucket外网访问的地址,最后将打包之后的文件上传到oss里面就可以了<br><img src="/2020/12/23/FrontPublish/aliossbucket.png"><br><font color='red'>需要注意的是阿里oss一次最多一百个文件，所以分开上传，防止文件被传漏了</font>。<br>上传好的文件夹格式如下：<br><img src="/2020/12/23/FrontPublish/aliossfile.png"><br><img src="/2020/12/23/FrontPublish/aliossfiletree.png"></p>
<p>将打包出来的index.html文件单独部署到服务器上，nginx配置参考<a href="/2020/12/04/Nginx/" title="Nginx常用脚本">Nginx常用脚本</a></p>
<p>最后解决一下跨域问题，这样部署后，访问我们的页面，会发现控制台报CORS跨域问题，这个在阿里oss中进行设置即可<br><img src="/2020/12/23/FrontPublish/cors.png"></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>前端问题记录</title>
    <url>/2020/12/12/FrontQA/</url>
    <content><![CDATA[<p>记录一下前端开发过程中遇到的问题。</p>
<a id="more"></a>

<h2 id="iframe跨域链接父子页面如何通信"><a href="#iframe跨域链接父子页面如何通信" class="headerlink" title="iframe跨域链接父子页面如何通信"></a>iframe跨域链接父子页面如何通信</h2><ul>
<li>参考链接1:<a href="https://stackoverflow.com/questions/27542785/binding-scroll-event-to-iframe">Binding scroll event to iframe</a></li>
<li>参考链接2:<a href="https://stackoverflow.com/questions/3076414/ways-to-circumvent-the-same-origin-policy">Ways to circumvent the same-origin policy</a></li>
</ul>
<p>因为同源政策，父页面和iframe中的url不是同一个源，导致父页面是不能获取到子页面的事件的</p>
<p>解决办法：<br>使用<code>window.postMessage</code><br>在父页面中：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Internet Explorer IE浏览器用的</span>
window<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onmessage'</span><span class="token punctuation">,</span>receiveMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Opera/Mozilla/Webkit</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> receiveMessage<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
    <span class="token comment">//父页面收到的消息内容 event.data</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在子页面中：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'子页面要传递的消息内容'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2021/01/22/Git/</url>
    <content><![CDATA[<p>Git操作</p>
<a id="more"></a>
<p><a href="https://learngitbranching.js.org/?locale=zh_CN">Git在线练习</a></p>
<h2 id="检出部分代码的步骤"><a href="#检出部分代码的步骤" class="headerlink" title="检出部分代码的步骤"></a>检出部分代码的步骤</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">
<span class="token function">git</span> init <span class="token operator">&lt;</span>project-name<span class="token operator">></span>
<span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>project-name<span class="token operator">></span>
<span class="token function">git</span> remote <span class="token function">add</span> -f origin <span class="token operator">&lt;</span>project-url<span class="token operator">></span>
<span class="token function">git</span> config core.sparseCheckout <span class="token boolean">true</span>
<span class="token builtin class-name">echo</span> <span class="token string">"you/want/checkout/floder or files/"</span> <span class="token operator">>></span> .git/info/sparse-checkout
<span class="token function">git</span> pull origin master
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
  </entry>
  <entry>
    <title>Java开发中遇到的问题</title>
    <url>/2020/12/04/Java/</url>
    <content><![CDATA[<p>记录一下开发过程中遇到的一些小坑，不是什么大bug,只是找原因浪费了一点时间，或者一些常遇到的问题</p>
<a id="more"></a>

<h2 id="Java执行shell命令不起作用"><a href="#Java执行shell命令不起作用" class="headerlink" title="Java执行shell命令不起作用"></a>Java执行shell命令不起作用</h2><p>想用<code>java</code>调用<code>bash</code>命令来清空文件，部署上去后，发现并没有执行成功，网上一番搜索找到了正确的打开方式</p>
<ul>
<li><p>错误用法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> cmd <span class="token operator">=</span> <span class="token string">"echo > Error.log"</span>
<span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>正确用法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> shellStr <span class="token operator">=</span> <span class="token string">"echo > Error.log"</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cmd <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> shellStr<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="Java字符串转日期"><a href="#Java字符串转日期" class="headerlink" title="Java字符串转日期"></a>Java字符串转日期</h2><ul>
<li>格式为<code>EEE MMM dd hh:mm:ss yyyy z</code>的字符串转换成日期<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"EEE MMM dd hh:mm:ss yyyy z"</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>US<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">"Thu Jul 16 22:11:11 2020 +0800"</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// Thu Jul 16 22:11:11 CST 2020</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="读取CSV文件"><a href="#读取CSV文件" class="headerlink" title="读取CSV文件"></a>读取CSV文件</h2></li>
<li>使用<a href="https://www.hutool.cn/">hutool</a>的<code>CsvUtil</code>读取同事发来格式为UTF8-bom的文件时第一个字段总是为空<br>原因是UTF8-bom文件头存在看不见的字符<code>\uFEFF</code>，所以需要在设置的别名前加上<code>\uFEFF</code>来解决这个问题。<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestObj</span><span class="token punctuation">></span></span> <span class="token function">csvReader</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CsvReader</span> reader <span class="token operator">=</span> <span class="token class-name">CsvUtil</span><span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//从文件中读取CSV数据</span>
        <span class="token keyword">return</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">FileUtil</span><span class="token punctuation">.</span><span class="token function">getUtf8Reader</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TestObj</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestObj</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//别名 \uFEFF为utf8-bom文件前缀</span>
    <span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"\uFEFFchange_id"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> changeId<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> user<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"ci_time"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> time<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>关于<code>\ufeff</code>的一些资料（引自<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F">维基百科</a>）<br>字节顺序标记（英语：byte-order mark，BOM）是位于码点U+FEFF的统一码字符的名称。当以UTF-16或UTF-32来将UCS/统一码字符所组成的字符串编码时，这个字符被用来标示其字节序。它常被用来当做标示文件是以UTF-8、UTF-16或UTF-32编码的标记。</li>
</ul>
<h2 id="Idea启动报错"><a href="#Idea启动报错" class="headerlink" title="Idea启动报错"></a>Idea启动报错</h2><p>idea启动项目时报<code>command line is too long</code>错误</p>
<ol>
<li>在文件<code>.idea/workspace.xml</code>中找到<code>&lt;component name=&quot;PropertiesComponent&quot;&gt;</code></li>
<li>在里面加上 <code>&lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</code></li>
<li>示例：<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PropertiesComponent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--添加这一行--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dynamic.classpath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jmeter性能测试</title>
    <url>/2020/12/25/Jmeter/</url>
    <content><![CDATA[<p>测试工具Jmeter教程</p>
<a id="more"></a>
<p>参考视频教程:<a href="https://www.youtube.com/watch?v=mXGcBvWYl-U&list=PLo0k7mD7p4afSZtJUEvPWG68V-0sumBj6">JMeter Tutorial For Beginners</a><br><font color=red>提示：国内网络无法访问</font></p>
<h2 id="下载-amp-启动"><a href="#下载-amp-启动" class="headerlink" title="下载&amp;启动"></a>下载&amp;启动</h2><p><font color=red>安装jmeter之前，确保已经安装了java环境</font>。可以通过运行 <code>java -version</code> 查看当前java版本符合jmeter最低要求。<br><a href="https://jmeter.apache.org/">官网地址</a>，选择<a href="https://jmeter.apache.org/download_jmeter.cgi">Download Releases</a><br>选择二进制包（Binaries）tar或者zip包都行，下载好后解压文件到电脑上。<br>macos/linux系统执行bin目录下<code>jmeter.sh</code>启动，windows系统执行bin目录下<code>jmeter.bat</code>启动</p>
<h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p>默认界面如下：<br><img src="/2020/12/25/Jmeter/JmeterDefault.png"></p>
<h2 id="重要组成部分"><a href="#重要组成部分" class="headerlink" title="重要组成部分"></a>重要组成部分</h2><p><img src="/2020/12/25/Jmeter/JmeterElements.png"></p>
<ol>
<li>Thread Group: 线程组，线程的集合，可以理解为一个线程模拟的一个用户的操作，通过设置线程数量来模拟用户的数量，比如设置100个线程，jemter就会模拟100个用户来请求服务器。</li>
<li>Samplers: 通过设置线程组来模拟用户请求，可是用户不知道该用哪种方式来请求服务器，Sampler支持 <code>HTTP</code>、<code>FTP</code>、<code>JDBC</code>等多种请求方式，通过设置sampler来定义用户请求服务器的方式。<br><img src="/2020/12/25/Jmeter/JmeterSample.png"></li>
<li>Listenrs: 用与展示测试结果,支持图（Graphs）、表格（Table）、结果树（Tree）、日志（log）等方式呈现</li>
<li>Configuration: 配置常用的基本变量，HTTP请求的Cookie,默认Http请求参数等。比如设置请求的默认域名或者ip,这样就不用在每个线程里面重复设置这些相同的内容。</li>
</ol>
<h2 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h2><ol>
<li>添加线程组<br><img src="/2020/12/25/Jmeter/ThreadGroupInfo.png"></li>
<li>添加HttpSamplers(取样器)<br><img src="/2020/12/25/Jmeter/HttpSampler.png"></li>
<li>添加Listenrs</li>
</ol>
<ul>
<li>结果树：<br><img src="/2020/12/25/Jmeter/ResultTree.png"></li>
<li>表格：<br><img src="/2020/12/25/Jmeter/ResultTable.png"></li>
</ul>
<p>基本用法比较简单，具体的可以结合自身业务进行设置。学习就在于不断的探索。<br>Thanks</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/2020/12/04/Mysql/</url>
    <content><![CDATA[<p>使用MySql遇到的问题总结</p>
<a id="more"></a>
<h2 id="Mybatis-Plus批量存储慢"><a href="#Mybatis-Plus批量存储慢" class="headerlink" title="Mybatis-Plus批量存储慢"></a>Mybatis-Plus批量存储慢</h2><p>mybatis-plus提供的saveBatch方法批量存储时为单条sql执行，存储速度慢，不适合大量数据存储，官方提供了insert into的sample需要开发人员自己单独集成。<br><a href="https://gitee.com/baomidou/mybatis-plus-samples/tree/master/mybatis-plus-sample-deluxe">官方示例</a></p>
<h2 id="Mysql导入大文件"><a href="#Mysql导入大文件" class="headerlink" title="Mysql导入大文件"></a>Mysql导入大文件</h2><p>Navicate执行大文件sql脚本时，速度慢还容易失败。所以直接在mysql中操作文件的导入。</p>
<ul>
<li>进入mysql<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>创建数据库<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token operator">&lt;</span>dbName<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>设置参数<br>如果不关闭log会导致binlog过大，使用navicate导入时，因为存储的binlog过大，导致mysql无法启动，删除binlog后mysql正常启动<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> sql_log_bin<span class="token operator">=</span><span class="token keyword">OFF</span><span class="token punctuation">;</span>
<span class="token keyword">set</span> autocommit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>使用数据库<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> <span class="token operator">&lt;</span>dbName<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>开启事务<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>开始导入<br>sqlFilePath是你的sql文件路径<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">source <span class="token operator">&lt;</span>sqlFilePath<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>执行完成后提交<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="记录binlog过大导致mysql无法启动的问题"><a href="#记录binlog过大导致mysql无法启动的问题" class="headerlink" title="记录binlog过大导致mysql无法启动的问题"></a>记录binlog过大导致mysql无法启动的问题</h2>错误信息<pre class="line-numbers language-log" data-language="log"><code class="language-log">2020-07-28T02:23:28.308800Z 0 [ERROR] [MY-010846] [Server] MYSQL_BIN_LOG::open_purge_index_file failed to open register file.
2020-07-28T02:23:28.308848Z 0 [ERROR] [MY-010817] [Server] MYSQL_BIN_LOG::open_index_file failed to sync the index file.
2020-07-28T02:23:28.308882Z 0 [ERROR] [MY-010119] [Server] Aborting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
解决办法<br>删除/var/lib/mysql目录下的binlog文件，docker容器启动的mysql则删除映射目录下的binlog文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/lib/mysql
<span class="token function">rm</span> -rf binlog.0*
<span class="token builtin class-name">echo</span> <span class="token operator">></span> binlog.index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx常用脚本</title>
    <url>/2020/12/04/Nginx/</url>
    <content><![CDATA[<p>Nginx一些部署时用到的脚本，记录一下，方便部署的时候复制粘贴^_^</p>
<a id="more"></a>
<h2 id="安装-amp-运行"><a href="#安装-amp-运行" class="headerlink" title="安装&amp;运行"></a>安装&amp;运行</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum <span class="token function">install</span> -y nginx
systemctl start nginx
systemctl stop nginx
systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="nginx代理前端页面配置"><a href="#nginx代理前端页面配置" class="headerlink" title="nginx代理前端页面配置"></a>nginx代理前端页面配置</h2><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">upstream</span> api_server  <span class="token punctuation">&#123;</span>
      <span class="token keyword">server</span>  <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">listen</span>       <span class="token number">8888</span><span class="token punctuation">;</span>
        <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>
        <span class="token keyword">root</span> <span class="token operator">/</span>home<span class="token operator">/</span>front<span class="token operator">/</span>dist<span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">location</span> <span class="token operator">^</span><span class="token operator">~</span> <span class="token operator">/</span>api<span class="token operator">/</span> <span class="token punctuation">&#123;</span>
           <span class="token keyword">proxy_redirect</span>     off<span class="token punctuation">;</span>
           <span class="token keyword">proxy_set_header</span>   Host             <span class="token variable">$host</span><span class="token punctuation">;</span>
           <span class="token keyword">proxy_set_header</span>   X<span class="token operator">-</span>Real<span class="token operator">-</span>IP        <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>
           <span class="token keyword">proxy_set_header</span>   X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For  <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>
           <span class="token keyword">proxy_next_upstream</span> error <span class="token keyword">timeout</span> invalid_header http_500 http_502 http_503 http_504<span class="token punctuation">;</span>
           <span class="token keyword">proxy_max_temp_file_size</span> <span class="token number">0</span><span class="token punctuation">;</span>
           <span class="token keyword">proxy_connect_timeout</span>      <span class="token number">90</span><span class="token punctuation">;</span>
           <span class="token keyword">proxy_send_timeout</span>         <span class="token number">90</span><span class="token punctuation">;</span>
           <span class="token keyword">proxy_read_timeout</span>         <span class="token number">90</span><span class="token punctuation">;</span>
           <span class="token keyword">proxy_buffer_size</span>          <span class="token number">4</span>k<span class="token punctuation">;</span>
           <span class="token keyword">proxy_buffers</span>              <span class="token number">4</span> <span class="token number">32</span>k<span class="token punctuation">;</span>
           <span class="token keyword">proxy_busy_buffers_size</span>    <span class="token number">64</span>k<span class="token punctuation">;</span>
           <span class="token keyword">proxy_temp_file_write_size</span> <span class="token number">64</span>k<span class="token punctuation">;</span>
           <span class="token keyword">rewrite</span> <span class="token operator">^</span><span class="token operator">/</span>api<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>$ <span class="token operator">/</span>$<span class="token number">1</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
           <span class="token keyword">proxy_pass</span>  <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api_server<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
        <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">50</span>x<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span>
            <span class="token keyword">root</span>   html<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
 <span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>
      <span class="token keyword">server_name</span> yourdomain<span class="token punctuation">;</span>
      <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8888</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx  -参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>参数说明</p>
<ul>
<li>-c <path_to_config>：使用指定的配置文件而不是 conf 目录下的 nginx.conf 。</li>
<li>-t：测试配置文件是否正确，在运行时需要重新加载配置的时候，此命令非常重要，用来检测所修改的配置文件是否有语法错误。</li>
<li>-s reload 重启</li>
<li>-s stop 停止</li>
</ul>
<h2 id="免费证书"><a href="#免费证书" class="headerlink" title="免费证书"></a>免费证书</h2><ul>
<li><p><a href="https://certbot.eff.org/lets-encrypt/centosrhel7-nginx">官网地址</a></p>
</li>
<li><p>安装 Certbot</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> certbot python2-certbot-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>自动安装证书并配置nginx<br>这里执行时，按照提示，填入相应的信息即可</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot --nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者只获取证书，自己手动配置nginx</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot certonly --nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>设置自动续订</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> -a /etc/crontab <span class="token operator">></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>通过https访问网站确定已经配置成功</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;your_domain_name&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>查看自动配置的nginx.conf文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"> <span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">server_name</span> your_domain_name<span class="token punctuation">;</span>
    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8888</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span><span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span>
    <span class="token keyword">ssl_certificate</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span>live<span class="token operator">/</span>your_domain_name<span class="token operator">/</span>fullchain<span class="token punctuation">.</span>pem<span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span>
    <span class="token keyword">ssl_certificate_key</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span>live<span class="token operator">/</span>your_domain_name<span class="token operator">/</span>privkey<span class="token punctuation">.</span>pem<span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span>
    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span>options<span class="token operator">-</span><span class="token keyword">ssl</span><span class="token operator">-</span>nginx<span class="token punctuation">.</span>conf<span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span>
    <span class="token keyword">ssl_dhparam</span> <span class="token operator">/</span>etc<span class="token operator">/</span>letsencrypt<span class="token operator">/</span><span class="token keyword">ssl</span><span class="token operator">-</span>dhparams<span class="token punctuation">.</span>pem<span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol>
<li><p>nginx启动报错：nginx: [emerg] bind() to 0.0.0.0:xxxx failed (13: Permission denied)<br>第一种情况：端口小于1024，如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx: <span class="token punctuation">[</span>emerg<span class="token punctuation">]</span> bind<span class="token punctuation">(</span><span class="token punctuation">)</span> to <span class="token number">0.0</span>.0.0:80 failed <span class="token punctuation">(</span><span class="token number">13</span>: Permission denied<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>小于1024的端口需要root权限启动，加上sudo即可<br>第二种情况，端口大于1024，如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx: <span class="token punctuation">[</span>emerg<span class="token punctuation">]</span> bind<span class="token punctuation">(</span><span class="token punctuation">)</span> to <span class="token number">0.0</span>.0.0:8888 failed <span class="token punctuation">(</span><span class="token number">13</span>: Permission denied<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>首先查看http允许访问的端口：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">semanage port -l <span class="token operator">|</span> <span class="token function">grep</span> http_port_t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http_port_t                    tcp      <span class="token number">80</span>, <span class="token number">81</span>, <span class="token number">443</span>, <span class="token number">488</span>, <span class="token number">8008</span>, <span class="token number">8009</span>, <span class="token number">8443</span>, <span class="token number">9000</span>
pegasus_http_port_t            tcp      <span class="token number">5988</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>发现我们的端口不在里面，添加上去</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">semanage port -a -t http_port_t  -p tcp <span class="token number">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后启动nginx</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>403 Forbidden<br><code>selinux</code>状态是开启的状态导致nginx 403</p>
</li>
</ol>
<ul>
<li>查看<code>selinux</code>状态<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/sbin/sestatus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>修改<code>selinux</code>状态<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/selinux/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#SELINUX=enforcing</span>
<span class="token assign-left variable">SELINUX</span><span class="token operator">=</span>disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>保存重启 <code>reboot</code></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
  </entry>
  <entry>
    <title>Npm相关的一些小东西</title>
    <url>/2020/12/04/Npm/</url>
    <content><![CDATA[<p>Npm发包以及版本号设置</p>
<a id="more"></a>

<h2 id="将项目的组件打包发布到NPM中"><a href="#将项目的组件打包发布到NPM中" class="headerlink" title="将项目的组件打包发布到NPM中"></a>将项目的组件打包发布到NPM中</h2><ol>
<li>注册<a href="https://www.npmjs.com/">NPM</a>账号</li>
</ol>
<ul>
<li>验证邮箱<br>这个步骤必须有<br>官方会给你注册的邮箱发一份邮件，如果短时间没有收到，可以耐心等待一段时间，如果长时间内没有收到官方发送的邮件，去设置里面查看一下邮件地址是否写错了<br>邮件里面包含了一个验证链接，点击一下链接即可。注意一点，先在网页上登陆，然后点开邮箱里面的链接，就可以完成验证。</li>
</ul>
<ol start="2">
<li>修改项目中的<code>package.json</code>文件<br>注意</li>
</ol>
<ul>
<li>以下只截取了修改的部分，使用时在已有的<code>package.json</code>文件中修改或者添加没有的即可</li>
<li><code>private</code><strong>切记一定要设置成</strong><code>false</code></li>
<li><code>name</code>为发布之后的包名<strong>唯一</strong>,不能与npm仓库中已有的名称重复</li>
<li><code>version</code>每次发布的版本号要不一样，否则会无法发布</li>
<li><code>main</code>打包后的js文件名字</li>
<li><code>build</code>指定打包的组件文件位置，如<code>src/index.js</code>文件里面导出的组件，下面会介绍<code>index.js</code>如何设置<pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;name&quot;: &quot;quectel&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;private&quot;: false,
  &quot;main&quot;: &quot;dist&#x2F;quectel.umd.min.js&quot;,
  &quot;scripts&quot;: &#123;
    &quot;build&quot;: &quot;vue-cli-service build --target lib --name quectel src&#x2F;index.js&quot;,
  &#125;
&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
在<code>src</code>目录下新建一个<code>index.js</code>文件,<code>index.js</code>文件名称和位置不固定，只要和<code>build</code>中配置的路径位置保持一致即可<br>在创建的文件中<code>export</code>自己的组件<pre class="line-numbers language-none"><code class="language-none">export &#123; default as Upload &#125; from &#39;&#x2F;components&#x2F;upload&#39;
export &#123; default as TreeList &#125; from &#39;&#x2F;components&#x2F;treeList&#39;
export &#123; default as TodoList &#125; from &#39;&#x2F;components&#x2F;TodoList&#39;
export &#123; default as Tips &#125; from &#39;&#x2F;components&#x2F;Tips&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<ol start="3">
<li><p>登陆创建好的NPM用户</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> login
<span class="token comment"># 或者 npm adduser</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>输入命令后，按照提示输入用户名、密码以及邮箱</p>
</li>
<li><p>打包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>发布</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> publish<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>发布的问题总结</p>
</li>
</ol>
<ul>
<li>出现403错误，或者登陆时报错<br>检查一下发布的地址，大多数国内用户会修改npm的默认镜像地址<br>换回官方地址<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry http://registry.npmjs.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
如果安装了nrm，也可以通过<code>nrm ls</code>查看镜像地址，然后使用命令<code>nrm use npm</code>换回官方地址<br>如：</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">$ nrm ls 
  npm ---- https:&#x2F;&#x2F;registry.npmjs.org&#x2F;
* cnpm --- http:&#x2F;&#x2F;r.cnpmjs.org&#x2F;
  taobao - https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;
  nj ----- https:&#x2F;&#x2F;registry.nodejitsu.com&#x2F;
  npmMirror  https:&#x2F;&#x2F;skimdb.npmjs.com&#x2F;registry&#x2F;
  edunpm - http:&#x2F;&#x2F;registry.enpmjs.org&#x2F;
$ nrm use npm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="修改版本号"><a href="#修改版本号" class="headerlink" title="修改版本号"></a>修改版本号</h2><ul>
<li><p>参考链接1: <a href="https://segmentfault.com/a/1190000014405355">https://segmentfault.com/a/1190000014405355</a></p>
</li>
<li><p>参考链接2: <a href="https://semver.org/lang/zh-CN/">https://semver.org/lang/zh-CN/</a><br>注意</p>
</li>
<li><p>执行之前，确保代码已经提交 <code> git add. &amp;&amp; git commit -m &#39;message&#39;</code></p>
</li>
<li><p>示例：版本号：1.3.17 依次对应 major.minor.patch<br>执行 <code>npm version patch</code> 就变成 1.3.18</p>
</li>
<li><p>升级补丁版本号：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> version patch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>升级小版本号：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> version minor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>升级大版本：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> version major<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 运行脚本</title>
    <url>/2020/12/04/Spring-Boot-Shell/</url>
    <content><![CDATA[<p>Spring boot部署用的脚本，真的很方便</p>
<a id="more"></a>

<h2 id="安装日志工具"><a href="#安装日志工具" class="headerlink" title="安装日志工具"></a>安装日志工具</h2><ul>
<li>首先安装日志切割工具cronolog<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y epel-release
yum <span class="token function">install</span> -y cronolog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<h2 id="jar包运行脚本模板"><a href="#jar包运行脚本模板" class="headerlink" title="jar包运行脚本模板"></a>jar包运行脚本模板</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#使用说明，用来提示输入参数</span>
<span class="token function-name function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"Usage: sh 执行脚本.sh -s [start|stop|restart|status] -e[dev|test|prod]"</span>
	<span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token punctuation">&#125;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">SERVER</span><span class="token operator">=</span><span class="token string">"AppName-根据jar包名称修改"</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">cronolog</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> cronolog<span class="token variable">)</span></span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">ENV</span><span class="token operator">=</span><span class="token string">"dev"</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">SCRIPT</span><span class="token operator">=</span><span class="token string">""</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">BASE_DIR</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>
	<span class="token builtin class-name">cd</span> <span class="token punctuation">$(</span>dirname $0<span class="token punctuation">)</span>
	<span class="token builtin class-name">pwd</span>
<span class="token variable">)</span></span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">TIME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d"</span><span class="token variable">)</span></span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">LOGFILE</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;BASE_DIR&#125;</span>/logs/<span class="token variable">$&#123;SERVER&#125;</span>-%Y-%m-%d.log"</span>
<span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">":s:e:"</span> ARGS<span class="token punctuation">;</span> <span class="token keyword">do</span>
	<span class="token keyword">case</span> <span class="token variable">$ARGS</span> <span class="token keyword">in</span>
	e<span class="token punctuation">)</span>
		<span class="token assign-left variable">ENV</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
		<span class="token punctuation">;</span><span class="token punctuation">;</span>
	s<span class="token punctuation">)</span>
		<span class="token assign-left variable">SCRIPT</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>
		<span class="token punctuation">;</span><span class="token punctuation">;</span>
	?<span class="token punctuation">)</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"未知选项：<span class="token variable">$ARGS</span>"</span>
		<span class="token builtin class-name">exit</span> <span class="token number">1</span>
		<span class="token punctuation">;</span><span class="token punctuation">;</span>
	<span class="token keyword">esac</span>
<span class="token keyword">done</span>

<span class="token comment"># JVM Configuration</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;ENV&#125;</span>"</span> <span class="token operator">==</span> <span class="token string">"test"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -Xms512m -Xmx512m -Xmn256m"</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;ENV&#125;</span>"</span> <span class="token operator">==</span> <span class="token string">"prod"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span>
	<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=<span class="token variable">$&#123;BASE_DIR&#125;</span>/logs/java_heapdump.hprof"</span>
	<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -XX:-UseLargePages"</span>
<span class="token keyword">else</span>
	<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> -Xms512m -Xmx512m -Xmn256m"</span>
<span class="token keyword">fi</span>
<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span>  -jar <span class="token variable">$&#123;SERVER&#125;</span>.jar"</span>
<span class="token assign-left variable">JAVA_OPT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;JAVA_OPT&#125;</span> --spring.profiles.active=<span class="token variable">$&#123;ENV&#125;</span>"</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$&#123;BASE_DIR&#125;</span>/logs"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token function">mkdir</span> <span class="token variable">$&#123;BASE_DIR&#125;</span>/logs
<span class="token keyword">fi</span>

<span class="token comment">#检查程序是否在运行</span>
<span class="token function-name function">is_exist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> $<span class="token punctuation">&#123;</span>SERVER<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$2</span>&#125;'</span><span class="token variable">)</span></span>
	<span class="token comment">#如果不存在返回1，存在返回0</span>
	<span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token string">"<span class="token variable">$&#123;pid&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token builtin class-name">return</span> <span class="token number">1</span>
	<span class="token keyword">else</span>
		<span class="token builtin class-name">return</span> <span class="token number">0</span>
	<span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">#启动方法</span>
<span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	is_exist
	<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;SERVER&#125;</span> is already running. pid=<span class="token variable">$&#123;pid&#125;</span> ."</span>
	<span class="token keyword">else</span>
		<span class="token function">nohup</span> java <span class="token variable">$&#123;JAVA_OPT&#125;</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token variable">$&#123;cronolog&#125;</span>  -p days <span class="token variable">$&#123;LOGFILE&#125;</span>  <span class="token operator">>></span> /dev/null <span class="token operator">&amp;</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;SERVER&#125;</span>  is starting,active profile:<span class="token variable">$&#123;ENV&#125;</span>，you can check it with command: tail -f <span class="token variable">$&#123;BASE_DIR&#125;</span>/logs/<span class="token variable">$&#123;SERVER&#125;</span>-<span class="token variable">$&#123;TIME&#125;</span>.log"</span>
	<span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">#停止方法</span>
<span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	is_exist
	<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token function">kill</span> -9 <span class="token variable">$pid</span>
	<span class="token keyword">else</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;SERVER&#125;</span> is not running"</span>
	<span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">#输出运行状态</span>
<span class="token function-name function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	is_exist
	<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;SERVER&#125;</span> is running. Pid is <span class="token variable">$&#123;pid&#125;</span>"</span>
	<span class="token keyword">else</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;SERVER&#125;</span> is NOT running."</span>
	<span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">#重启</span>
<span class="token function-name function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	stop
	start
<span class="token punctuation">&#125;</span>
<span class="token comment">#根据输入参数，选择执行对应方法，不输入则执行使用说明</span>
<span class="token keyword">case</span> <span class="token string">"<span class="token variable">$&#123;SCRIPT&#125;</span>"</span> <span class="token keyword">in</span>
<span class="token string">"start"</span><span class="token punctuation">)</span>
	start
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">"stop"</span><span class="token punctuation">)</span>
	stop
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">"status"</span><span class="token punctuation">)</span>
	status
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token string">"restart"</span><span class="token punctuation">)</span>
	restart
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
*<span class="token punctuation">)</span>
	usage
	<span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li>修改权限<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> app.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>启动（环境根据实际开发的情况指定）<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./app.sh -s start -e prod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>重启<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./app.sh -s restart -e prod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>停止<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./app.sh -s stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>运行状态<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./app.sh -s status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2>执行脚本文件报错 /bin/bash^M: bad interpreter: No such file or directory<br>这是文件格式问题：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编辑文件</span>
<span class="token function">vi</span> <span class="token operator">&lt;</span>fileName<span class="token operator">></span>
<span class="token comment">#执行命令 如果显示fileformat=dos，则需要修改文件格式为unix</span>
:set ff
<span class="token comment">#修改格式</span>
:set <span class="token assign-left variable">ff</span><span class="token operator">=</span>unix
:wq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>神一样的自动化测试工具分享</title>
    <url>/2020/12/04/Test/</url>
    <content><![CDATA[<p>0基础自动化测试，有手就行</p>
<a id="more"></a>
<h2 id="TestProject"><a href="#TestProject" class="headerlink" title="TestProject"></a>TestProject</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li><a href="https://testproject.io/">TestProject</a>是一款基于Selenium和Appium之上的开源工具，永久免费，提供了录制、回放等功能，只需要安装TestProject的安装包(支持windows、mac、linux)就可以使用计算机上所有的浏览器和设备，支持Web和App自动化测试。</li>
<li><a href="https://docs.testproject.io/">官方文档</a></li>
<li><a href="https://app.testproject.io/#/agents">下载安装</a>客户端。</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用分三步： </p>
<ol>
<li><a href="(https://testproject.io/)">注册</a>testproject账户，用邮箱注册即可，注册好账户后登陆进入主界面</li>
<li>下载代理（agents），代理的作用是控制电脑本地的浏览器，并且它会自动检测电脑上面装有哪些浏览器，非常方便，不需要额外下载各种浏览器的驱动，用过selenium做过自动化测试的同学应该知道，不同的浏览器需要下载相应的驱动，但是testproject并不需要，只要安装agent并启动它。</li>
<li>在<code>Aagents</code>页面下点击<code>Register Agent</code>，它会自动检测将我们本地启动的agent注册上来</li>
</ol>
<h3 id="工作台介绍"><a href="#工作台介绍" class="headerlink" title="工作台介绍"></a>工作台介绍</h3><p><img src="/2020/12/04/Test/dashboard.png"></p>
<ol>
<li>Home: 主页，上面显示一些推荐的插件（addons），这些插件功能很强大，后面我们会介绍一些常用的插件，右侧显示我们最近运行过的测试脚本，最下面显示的是我们创建的项目，默认会有个<code>My First Project</code>的示例项目。</li>
<li>Monitor: 监控页，显示最近的测试数量，job数量等一些参数指标。</li>
<li>Addons: 插件页面，用到的比较多，这里可以从社区添加插件，也可以添加自己开发的插件。</li>
<li>Reports: 这个页面可以看到最近一段时间的测试情况。成功或者失败的统计指标等。</li>
<li>Agents: agents页面可以看到当前账户注册了哪些agent(代理)，就是我们安装的客户端。可以对agent进行删除，添加等操作。agent状态有Disconnect,Starting,Ready,Busy,Recording等状态，当为Ready状态的Agent代表是可以使用的。</li>
<li>Integrations: 这个页面包含开放的SDK，API，Webhooks，自定义插件开发等。</li>
<li><code>New Test</code>按钮可以快速的创建一个测试脚本。</li>
<li><code>Invite Teamate</code>可以邀请成员到你的项目中。所以TestProject是支持团队协作的，可以共享测试脚本，非常的人性化。</li>
</ol>
<h3 id="添加Agents"><a href="#添加Agents" class="headerlink" title="添加Agents"></a>添加Agents</h3><p>在<code>agents</code>页签下可以点击<code>Register Agents</code>来连接我们安装在电脑本地的agent（代理）,如果agent已经在电脑上面运行了，点击添加时只需要填写一下agent的自定义名称，testproject会自动添加上，除了添加本地的agent还可以添加其他远程机器上的agent,只需要填上其他机器的ip地址即可。<br><img src="/2020/12/04/Test/agentAdd.png"><br>在列表中看到我们的agent状态为<code>ready</code>代表已经添加成功，可以录制和执行测试脚本了。<br><img src="/2020/12/04/Test/agentReady.png"></p>
<h3 id="Demo演示"><a href="#Demo演示" class="headerlink" title="Demo演示"></a>Demo演示</h3><ol>
<li><p>第一次进入Home页，可以看到testproject自动创建了一个<code>My First Project</code>的示例项目，我们可以点击运行，选择自己的<code>agent</code>运行该项目。<br><img src="/runDemoTest.png"></p>
</li>
<li><p>录制页面介绍，打开录制页，页签依次是TEST(测试信息)，STEPS(测试步骤)，PARAMETERS(参数)，LOCATOR(元素定位)，EXPLORER(页面元素详情)</p>
</li>
<li><p>RECORD按钮按下开始记录我们的操作，RUN执行选中的步骤(STEPS)，不选则执行所有的测试步骤。</p>
</li>
<li><p>最底部的两个按钮<code>Add step manually</code>和<code>Add test as a step</code>分别是手动添加测试步骤和将测试集合（由多个测试步骤的组成的组）作为测试步骤添加到当前测试中。</p>
<img src="/2020/12/04/Test/record.png" class="" width="500" height="700">
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3></li>
<li><p>在录制界面，鼠标移动到需要添加动作的元素上，通过连按两次<code>shift</code>，会弹出菜单，选择菜单上我们需要的功能吗，就可以对该元素添加相应的动作或者事件。如<code>click</code>(点击事件)，<code>type text</code>(输入文本)等操作。以输入文本为例：<br><img src="/2020/12/04/Test/elementAction.png"></p>
</li>
<li><p>编辑<code>type text</code>事件<br><img src="/2020/12/04/Test/saveStep.png"></p>
</li>
<li><p>运行刚刚保存的测试步骤<br><img src="/2020/12/04/Test/runStep.png"></p>
</li>
<li><p>查看运行结果<br><img src="/2020/12/04/Test/runResult.png"></p>
</li>
</ol>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>TestProject提供了各种插件来辅助我们自动化测试，比如：<code>String Utils</code>(字符串工具)，<code>File Uploader</code>(文件上传)，<code>MySQL Database</code>(Mysql数据库连接)等。各种常见场景都提供了相应的插件使用，如果官方提供的插件不能满足我们的使用需求，我们还可以自己开发插件使用。官方提供了插件开发的<a href="https://github.com/testproject-io/addons/tree/master/Examples">示例Demo</a></p>
<h2 id="XPATH教程"><a href="#XPATH教程" class="headerlink" title="XPATH教程"></a>XPATH教程</h2><h3 id="匹配节点"><a href="#匹配节点" class="headerlink" title="匹配节点"></a>匹配节点</h3><table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>从根节点选取</td>
</tr>
<tr>
<td>//</td>
<td>忽略位置匹配所有符合条件的节点</td>
</tr>
<tr>
<td>.</td>
<td>当前节点</td>
</tr>
<tr>
<td>..</td>
<td>当前节点的父节点</td>
</tr>
<tr>
<td>@</td>
<td>选择属性</td>
</tr>
</tbody></table>
<h3 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h3><table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>//input[@placeholder = ‘请输入姓名’]</td>
<td>匹配所有的input节点并且placeholder属性等于“请输入姓名”</td>
</tr>
<tr>
<td>/html/body//div[contains(@class,”el-select-dropdown__wrap”)]</td>
<td>匹配/html/body下div class包含“el-select-dropdown__wrap”</td>
</tr>
<tr>
<td>/html/body//div[contains(@style,”position: absolute;”)]</td>
<td>匹配/html/body下div style包含“position: absolute;”</td>
</tr>
<tr>
<td>/ul//li[. = ‘是’]</td>
<td>匹配ul标签下li标签内容为“是”的节点</td>
</tr>
<tr>
<td>(//input[@type=’file’])[1]</td>
<td>匹配input type属性为file的节点，并选取匹配到的第一个</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>我常用的一些网站</title>
    <url>/2020/12/04/WebSite/</url>
    <content><![CDATA[<p>一些不错的网站和学习内容</p>
<a id="more"></a>

<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul>
<li>Nacos：<a href="https://nacos.io/zh-cn/docs/quick-start.html">https://nacos.io/zh-cn/docs/quick-start.html</a></li>
<li>Hutools(Java工具类)：<a href="https://www.hutool.cn/docs/#/">https://www.hutool.cn/docs/#/</a></li>
<li>Mybatis-Plus：<a href="https://mp.baomidou.com/">https://mp.baomidou.com/</a></li>
<li>Json在线格式化：<a href="http://json.cn/">http://json.cn/</a></li>
<li>Jwt在线解析：<a href="https://www.jsonwebtoken.io/">https://www.jsonwebtoken.io/</a></li>
<li>内网穿透：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></li>
<li>LeetCode: <a href="https://github.com/MisterBooo/LeetCodeAnimation">https://github.com/MisterBooo/LeetCodeAnimation</a></li>
<li>正则表达式学习: <a href="https://regexone.com/lesson/introduction_abcs">https://regexone.com/lesson/introduction_abcs</a></li>
<li>正则校验: <a href="https://regexr.com/">https://regexr.com/</a></li>
<li>动画学习git: <a href="https://learngitbranching.js.org/?locale=zh_CN">https://learngitbranching.js.org/?locale=zh_CN</a></li>
<li>SQL练习: <a href="https://sqlzoo.net/">https://sqlzoo.net/</a></li>
</ul>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul>
<li>随机图片：<a href="https://picsum.photos/">https://picsum.photos/</a></li>
<li>IconFont：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li>
<li>ElementUI：<a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></li>
<li>Ant Design：<a href="https://ant.design/index-cn">https://ant.design/index-cn</a></li>
<li>AntV蚂蚁数据可视化：<a href="https://antv.vision/zh">https://antv.vision/zh</a></li>
<li>飞冰：<a href="https://ice.work/">https://ice.work/</a></li>
<li>qiankun微前端框架：<a href="https://github.com/umijs/qiankun">https://github.com/umijs/qiankun</a></li>
<li>Hover动画：<a href="https://github.com/IanLunn/Hover">https://github.com/IanLunn/Hover</a></li>
<li>视频播放器：<a href="http://dplayer.js.org/">http://dplayer.js.org/</a></li>
<li>TURF：<a href="http://turfjs.org/">http://turfjs.org</a></li>
<li>Gatsby：<a href="https://www.gatsbyjs.org/">https://www.gatsbyjs.org/</a></li>
<li>JS Coach:：<a href="https://js.coach/">https://js.coach/</a></li>
<li>前端算法：<a href="https://github.com/trekhleb/javascript-algorithms">https://github.com/trekhleb/javascript-algorithms</a></li>
<li>fakerjs: <a href="https://github.com/Marak/faker.js">https://github.com/Marak/faker.js</a></li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul>
<li>TestProject: <a href="https://testproject.io/">https://testproject.io/</a></li>
<li>pytest: <a href="https://docs.pytest.org/">https://docs.pytest.org/</a></li>
</ul>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul>
<li>OurSketch：<a href="https://oursketch.com/">https://oursketch.com/</a></li>
<li>Sketch工具集Kitchen：<a href="https://kitchen.alipay.com/">https://kitchen.alipay.com/</a></li>
<li>Sketch插件Dapollo：<a href="https://dapollo.alipay.com/">https://dapollo.alipay.com/</a></li>
<li>Color Hunt：<a href="https://colorhunt.co/">https://colorhunt.co/</a></li>
</ul>
<h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ul>
<li>技术面试必备：<a href="https://github.com/CyC2018/CS-Notes">https://github.com/CyC2018/CS-Notes</a></li>
<li>java学习+面试指南：<a href="https://github.com/Snailclimb/JavaGuide">https://github.com/Snailclimb/JavaGuide</a></li>
<li>面试必备：<a href="https://github.com/CyC2018/CS-Notes">https://github.com/CyC2018/CS-Notes</a></li>
<li>前端知识结构：<a href="https://github.com/JacksonTian/fks">https://github.com/JacksonTian/fks</a></li>
<li>前端面试英文版：<a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions">https://github.com/h5bp/Front-end-Developer-Interview-Questions</a></li>
<li>前端面试中文版：<a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question">https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Question</a></li>
<li>前端面试每日3+1：<a href="https://github.com/haizlin/fe-interview">https://github.com/haizlin/fe-interview</a></li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>码云：<a href="https://gitee.com/">https://gitee.com/</a></li>
<li>Github：<a href="https://github.com/">https://github.com/</a></li>
<li>Github国内镜像地址：<a href="https://hub.fastgit.org/">https://hub.fastgit.org/</a><a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org/</a></li>
<li>StackOverflow：<a href="https://stackoverflow.com/">https://stackoverflow.com/</a></li>
<li>华为开源镜像站：<a href="https://mirrors.huaweicloud.com/">https://mirrors.huaweicloud.com/</a></li>
<li>阿里开源镜像站：<a href="https://developer.aliyun.com/mirror/?lang=zh-CN/">https://developer.aliyun.com/mirror/?lang=zh-CN/</a></li>
<li>淘宝镜像源：<a href="https://npm.taobao.org/mirrors">https://npm.taobao.org/mirrors</a></li>
<li>代码高亮：<a href="https://cdn.jsdelivr.net/npm/prismjs@1/components/">https://cdn.jsdelivr.net/npm/prismjs@1/components/</a></li>
<li>Markdown表格生成：<a href="https://tableconvert.com/">https://tableconvert.com/</a></li>
</ul>
]]></content>
      <tags>
        <tag>Website</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Jsoup防止富文本Xss攻击</title>
    <url>/2021/06/11/XSS/</url>
    <content><![CDATA[<p><a href="https://github.com/jhy/jsoup">Jsoup Github地址</a>,<a href="https://jsoup.org/">官网地址</a></p>
<a id="more"></a>

<h1 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h1><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
  <span class="token comment">&lt;!-- jsoup HTML parser library @ https://jsoup.org/ --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.13.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><p><a href="https://jsoup.org/cookbook/cleaning-html/whitelist-sanitizer">官方示例代码地址</a></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"&lt;h1>&lt;span onclick=\"alert('测试')\" style=\"background-color: rgb(194, 79, 74); font-style: italic; color: rgb(139, 170, 74);\">测试XSS&lt;/span>&lt;/h1>"</span><span class="token punctuation">;</span>
	<span class="token class-name">Whitelist</span> whitelist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Whitelist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">// 具体标签和属性设置根据实际情况配置</span>
	whitelist<span class="token punctuation">.</span><span class="token function">addAttributes</span><span class="token punctuation">(</span><span class="token string">":all"</span><span class="token punctuation">,</span><span class="token string">"style"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"font-style"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	whitelist<span class="token punctuation">.</span><span class="token function">addTags</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span><span class="token string">"h1"</span><span class="token punctuation">,</span><span class="token string">"div"</span><span class="token punctuation">,</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token class-name">Jsoup</span><span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//&lt;h1>&lt;span style="background-color: rgb(194, 79, 74); font-style: italic; color: rgb(139, 170, 74);">测试XSS&lt;/span>&lt;/h1></span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后台</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于</title>
    <url>//about.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Mac配置</title>
    <url>/2020/12/04/mac/</url>
    <content><![CDATA[<p>mac的brew配置以及终端代理</p>
<a id="more"></a>
<h2 id="替换Homebrew镜像源"><a href="#替换Homebrew镜像源" class="headerlink" title="替换Homebrew镜像源"></a>替换Homebrew镜像源</h2><p><a href="https://developer.aliyun.com/mirror/homebrew?spm=a2c6h.13651102.0.0.24311b11XFui3N">原文链接</a></p>
<ol>
<li>bash终端配置</li>
</ol>
<ul>
<li>替换brew.git:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span>
<span class="token function">git</span> remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>替换homebrew-core.git:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span>
<span class="token function">git</span> remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>应用生效<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>替换homebrew-bottles:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile
<span class="token builtin class-name">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<ol start="2">
<li><p>Zsh 终端配置</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换brew.git:</span>
<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span>
<span class="token function">git</span> remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git
<span class="token comment"># 替换homebrew-core.git:</span>
<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span>
<span class="token function">git</span> remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git
<span class="token comment"># 应用生效</span>
brew update
<span class="token comment"># 替换homebrew-bottles:</span>
<span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> <span class="token operator">>></span> ~/.zshrc
<span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>恢复默认配置</p>
</li>
</ol>
<ul>
<li>首先执行下述命令:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重置brew.git:</span>
<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span>
<span class="token function">git</span> remote set-url origin https://github.com/Homebrew/brew.git
<span class="token comment"># 重置homebrew-core.git:</span>
<span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span>
<span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-core.git
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>然后删掉 HOMEBREW_BOTTLE_DOMAIN 环境变量,将你终端文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
或者<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
中<pre class="line-numbers language-none"><code class="language-none">HOMEBREW_BOTTLE_DOMAIN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
行删掉, 并执行<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
或者<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

</li>
</ul>
<h2 id="终端走代理"><a href="#终端走代理" class="headerlink" title="终端走代理"></a>终端走代理</h2><ul>
<li>临时的方式，影响最小<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://proxyAddress:port<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
e.g.<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:1087"</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span><span class="token string">"http://127.0.0.1:1087"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA加密解密</title>
    <url>/2021/06/29/rsa/</url>
    <content><![CDATA[<p>Java、JS、C++ RAS加密解密代码实现。</p>
<a id="more"></a>

<h2 id="JavaScript-RSA加解密"><a href="#JavaScript-RSA加解密" class="headerlink" title="JavaScript RSA加解密"></a>JavaScript RSA加解密</h2><h3 id="第三方相关组件"><a href="#第三方相关组件" class="headerlink" title="第三方相关组件"></a>第三方相关组件</h3><ul>
<li><a href="https://github.com/rzcoder/node-rsa">node-rsa</a></li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> node-rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="代码实现-Java-Script"><a href="#代码实现-Java-Script" class="headerlink" title="代码实现-Java Script"></a>代码实现-Java Script</h3><ul>
<li>定义方法</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> NodeRSA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"node-rsa"</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">getRSAKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 生成空对象</span>
    <span class="token keyword">let</span> keyPair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeRSA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    keyPair<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        encryptionScheme<span class="token operator">:</span><span class="token string">"pkcs1"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment">// keyPairObj, 保存经 BASE64 编码处理之后 PEM 格式的 RSA 密钥对</span>
    <span class="token keyword">let</span> keyPairObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        publicKey<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
        privateKey<span class="token operator">:</span> <span class="token string">''</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// keySize: 2048 公指数为：65537</span>
    keyPair<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">)</span>
    <span class="token comment">/**
     * 导出密钥，对输出的密钥做一些格式化处理，以便 Java 端能直接使用，算然经过处理但是并不影响 JS 端的密钥导入，及正确性。
     * 1. 公钥
     * 2. 私钥
     */</span>
    keyPairObj<span class="token punctuation">.</span>publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">exportKey</span><span class="token punctuation">(</span><span class="token string">"pkcs8-public-pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-----BEGIN PUBLIC KEY-----</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-----END PUBLIC KEY-----</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    keyPairObj<span class="token punctuation">.</span>privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">exportKey</span><span class="token punctuation">(</span><span class="token string">"pkcs8-private-pem"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-----BEGIN PRIVATE KEY-----</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-----END PRIVATE KEY-----</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> keyPairObj
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 公钥加密
 * @param content 要加密的内容
 * @param publicKey 加密用的公钥
 * @param encoding
 * @param source_encoding
 * @returns &#123;string|Buffer&#125;
 */</span>
<span class="token keyword">function</span> <span class="token function">publicKeyEncrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> publicKey<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"base64"</span><span class="token punctuation">,</span> source_encoding <span class="token operator">=</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 导入 publicKey</span>
    <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeRSA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    key<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        encryptionScheme<span class="token operator">:</span><span class="token string">"pkcs1"</span><span class="token punctuation">,</span> <span class="token comment">// 默认是：pkcs1_oaep，Java 端默认是 pkcs1, 这里做个修改</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    key<span class="token punctuation">.</span><span class="token function">importKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span> <span class="token string">"pkcs8-public-pem"</span><span class="token punctuation">)</span>
    <span class="token comment">// 加密并返回加密结果</span>
    <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> source_encoding<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 私钥解密，解密之后 返回 utf8编码的字符串
 * @param content: 公钥加密后的base64内容
 * @param privateKey: 解密用的私钥，格式是：pkcs8 pem
 * @param encoding: 加密之后的类型 buffer OR json, 默认是 buffer
 * @returns：默认返回值类型就是 encoding 的默认值，即 buffer
 */</span>
<span class="token keyword">function</span> <span class="token function">privateKeyDecrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"buffer"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 导入 privateKey</span>
    <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeRSA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    key<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        encryptionScheme<span class="token operator">:</span> <span class="token string">"pkcs1"</span><span class="token punctuation">,</span> <span class="token comment">// 默认是：pkcs1_oaep，Java 端默认是 pkcs1, 这里做个修改</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    key<span class="token punctuation">.</span><span class="token function">importKey</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">,</span> <span class="token string">"pkcs8-private-pem"</span><span class="token punctuation">)</span>
    <span class="token comment">// 解密</span>
    <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>测试代码</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// RSA 测试</span>
<span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">"kldfajdjfjsdf+-**?/calk@1239"</span>
<span class="token comment">// 生成密钥对</span>
<span class="token keyword">let</span> keyPair <span class="token operator">=</span> <span class="token function">getRSAKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> encrypted <span class="token operator">=</span> <span class="token function">publicKeyEncrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> decrypted <span class="token operator">=</span> <span class="token function">privateKeyDecrypt</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"公钥："</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"私钥："</span><span class="token punctuation">,</span> keyPair<span class="token punctuation">.</span>privateKey<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"公钥加密密文(经 BASE64 处理)："</span> <span class="token operator">+</span> encrypted<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"私钥解密之后的明文："</span> <span class="token operator">+</span> decrypted<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>运行测试代码</li>
</ul>
<blockquote>
<p><code>node 你的js文件名.js</code></p>
</blockquote>
<pre class="line-numbers language-log" data-language="log"><code class="language-log">公钥： MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtnAl229x43yLJVn26PifLbpflYkwOuYzaOS+ij5hmgjmsjwKsQTvB60WA9ET9qgP1Y4EX1LJoAUfGOg5c4fgDloUz5bq6rRI7+GVfXatOIMfaTdWYxCW&#x2F;EGUE3IBci8dq14sY3neXALzhwKQLsirt76MAGojDQ3VoL5wEp&#x2F;ZbE9QxUo4Fj9rLIfjEy+&#x2F;MWXzUzedh1hqAJdtIydLUdXd4oVordK1UKXAc3g9K3rk3ZbE8wTe7tz5dh0XQr9lbo8+eR4X8b6cJT&#x2F;bzhZsffZs55ZjvdNIcMdaT1IxycypmmUZCNAVl+KGQ0hiAA1CG&#x2F;Qk6R0ep1fPwfEk0xgrkdwIDAQAB
私钥： MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC2cCXbb3HjfIslWfbo+J8tul+ViTA65jNo5L6KPmGaCOayPAqxBO8HrRYD0RP2qA&#x2F;VjgRfUsmgBR8Y6Dlzh+AOWhTPlurqtEjv4ZV9dq04gx9pN1ZjEJb8QZQTcgFyLx2rXixjed5cAvOHApAuyKu3vowAaiMNDdWgvnASn9lsT1DFSjgWsh+P+IETL78xZfNTN52HWGoAl20jJ0tR1d3ihWit0rVQpcBzeD0reuTdlsTzBN7u3Pl2HRdCv2Vujz55HhfxvpwlP9vOFmx99mznlmO900hwx1pPUjHJzKmaZRkI0BWX4oZDSGIADUIb9CTpHR6nV8&#x2F;B8STTGCuR3AgMBAAECggEAbHw11s3ngGnf6F8d9x1Ysn2AN1Cz8GJRMc&#x2F;MCjLcIRen71bK2MbhSMRBMhXS9Dqt58SijviQ0uoYutvkxfGHZ6FjfKn2mYiJUrPnDAtVKCS4uf1hDlmgHvL0FbgWagrgbrX6WVDvy&#x2F;EpVSBOErPbgND7OYfjvfB7FzIHPNv3E3L2W2ZMuUaQC+MW8Ui+m7S0hgaCb4TRTEAfaHhYkIIMmy4YMMEweSFwTulZ99dUzDI4U+3MT9W+eMaq&#x2F;kPk9nLdZJB4I+Q7KHDP6OiUbrU4qQEkGeISkeFO46NP0wgxYHB+jHiXo9Dbr2mnernDAIBltkXSZ4dm5&#x2F;6Ig2UDzHw6qQKBgQD+TCQ63AOZ4sP4Z171iLFw9zBiH+lvuEqfyTMPP0VKM98pmGSs6m&#x2F;Co1GSRrzhXNu4g8B+mH4XvxJJoDDoe&#x2F;4mAUCLomPTOaOMOAzON8HddGhTCu5uKKjsFIYsP7fgL9wleiU8RQpA&#x2F;HnOIbkR4DgkbHxG8cEyVXSN&#x2F;lA&#x2F;p0eSwwKBgQC3qNdsW5osHwNxiN7OGaxH6KCsKHnEDDYACKDVnWAlyePopSq&#x2F;YWAa9Txnn4SfDDHgnXAsSmJgRciqCYzFFR8CUmKitQcn0g21KwpRgUKEWS8jFcXL1gtzn9T7wyedIWQOks7UztXw5c&#x2F;ckXosotA+NR0EYNhLN8Gd0tp9QKikPQKBgGVL+1qe7ahNFndK5h60lspDDTjpMVnZdZB02ywFrhpC03CETgY7VM2ZtRKpru+ux6+WfAVxxTi8WhKOBy10xuZotUdqJo2rdiSS5zb2KvmGN1BtGFE1TSTNgCz8LMjXB8C+CTsa3VzJtdOQx2IBiRupQ1AXWTgtpkIxvdG9Vtt1AoGACXGrMi07rk0h9jKdkmeLjl8N9AxYxpYCKNpIuvNOwGKzT4E+w3yUXo6BvqpbPXp5Dh3KaNyiVmUAPo4jKPc&#x2F;EvV9kPRSG+AXSFugOjS1YOzdGabC9wpYqGdtokyUuuW+qWkvLY49PhfzKlpot+bfYnOEvHbmaGfDkwQGrC4o&#x2F;dkCgYAJe6Bn4pvnLWXYHaDmARjP&#x2F;VEGq1i+8OgiJcVi+eNorkDoQjcGjo2ETCr3F3Z28QFEG14C9kdHQXKQNPKawzbzoMG40TqXmS9aw4rkIFX&#x2F;6MtUugUyjmbYBmsHyuVE5AYfYsYY6AqPArCf2x7rFPKhdHZVHcJ1GZgMl0P1Tydg3A&#x3D;&#x3D;
公钥加密密文(经 BASE64 处理)：FBlv0Zzi1LFn5AWRC3yxnfX74&#x2F;aHhU8EB0viBJJiDbXfGCecahOXh0T48XzX1mbaIWf&#x2F;MtgJJek2&#x2F;oUN&#x2F;+XCZ6CYFkYwcVLZ+H7QSDSARCcjrLyYQtZhhBDkXkrwfqO2VlD5JM+cMOTGiVZWFxTH884ztLzAMWmagNJ7Rg4Ej1F+BFFehGdMK24FZ5qP2s3V3aLppJCI0ssXx0aTRGwyjswEwr2utslcEMlLjp&#x2F;NBJti9R3o4FoXmz0sR00l64kTRQoB8HCV1d2Su2oDs78SYJ+wOs5t4katFuUDc1XGB&#x2F;xs+N9sqz3rI8yLfpHqS7pEs33CmBhR6BNg&#x3D;&#x3D;
私钥解密之后的明文：kldfajdjfjsdf+-**?&#x2F;calk@1239
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Java-RSA加解密"><a href="#Java-RSA加解密" class="headerlink" title="Java RSA加解密"></a>Java RSA加解密</h2><h3 id="代码实现-Java"><a href="#代码实现-Java" class="headerlink" title="代码实现-Java"></a>代码实现-Java</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">Cipher</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RsaUtil</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RSA <span class="token operator">=</span> <span class="token string">"RSA"</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 生成密钥对：密钥对中包含公钥和私钥
     * @return 包含 RSA 公钥与私钥的 keyPair
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyPair</span> <span class="token function">getKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获得RSA密钥对的生成器实例</span>
        <span class="token class-name">KeyPairGenerator</span> keyPairGenerator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RSA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 一个安全的随机数</span>
        <span class="token class-name">SecureRandom</span> secureRandom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里可以是1024、2048 初始化一个密钥对</span>
        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> secureRandom<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获得密钥对</span>
        <span class="token keyword">return</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 获取公钥 (并进行 Base64 编码，返回一个 Base64 编码后的字符串)
     * @param keyPair：RSA 密钥对
     * @return 返回一个 Base64 编码后的公钥字符串
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token class-name">KeyPair</span> keyPair<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PublicKey</span> publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> publicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 获取私钥(并进行Base64编码，返回一个 Base64 编码后的字符串)
     * @param keyPair：RSA 密钥对
     * @return 返回一个 Base64 编码后的私钥字符串
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span><span class="token class-name">KeyPair</span> keyPair<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PrivateKey</span> privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 将 Base64 编码后的公钥转换成 PublicKey 对象
     * @param pubStr：Base64 编码后的公钥字符串
     * @return PublicKey
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PublicKey</span> <span class="token function">string2PublicKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> pubStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>pubStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">X509EncodedKeySpec</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">X509EncodedKeySpec</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">KeyFactory</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RSA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePublic</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 将 Base64 码后的私钥转换成 PrivateKey 对象
     * @param priStr：Base64 编码后的私钥字符串
     * @return PrivateKey
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PrivateKey</span> <span class="token function">string2PrivateKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> priStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>priStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PKCS8EncodedKeySpec</span> keySpec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PKCS8EncodedKeySpec</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">KeyFactory</span> keyFactory <span class="token operator">=</span> <span class="token class-name">KeyFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>RSA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> keyFactory<span class="token punctuation">.</span><span class="token function">generatePrivate</span><span class="token punctuation">(</span>keySpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 公钥加密
     * @param content 待加密的内容 byte[]
     * @param publicKey 加密所需的公钥对象 PublicKey
     * @return 加密后的字节数组 byte[]
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">publicKeyEncrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content<span class="token punctuation">,</span> <span class="token class-name">PublicKey</span> publicKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">rsa</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">,</span>content<span class="token punctuation">,</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>ENCRYPT_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * 私钥解密
     * @param content   待解密的内容 byte[]，这里要注意，由于我们中间过程用的都是 BASE64 ，所以在传入参数前应先进行 BASE64 解析
     * @param privateKey    解密需要的私钥对象 PrivateKey
     * @return 解密后的字节数组 byte[]，这里是元数据，需要根据情况自行转码
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">privateKeyDecrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content<span class="token punctuation">,</span> <span class="token class-name">PrivateKey</span> privateKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">rsa</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">,</span>content<span class="token punctuation">,</span><span class="token class-name">Cipher</span><span class="token punctuation">.</span>DECRYPT_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * rsa 加、解密
     *
     * @param key  key
     * @param data 数据
     * @param mode 模式
     * @return 解密后的数据
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rsa</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Cipher</span> cipher <span class="token operator">=</span> <span class="token class-name">Cipher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 待加密内容</span>
        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"ksjalfjksdjfsf+-**?/calk@1239"</span><span class="token punctuation">;</span>
        <span class="token class-name">KeyPair</span> keyPair <span class="token operator">=</span> <span class="token function">getKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">PrivateKey</span> privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">PublicKey</span> publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"公钥为（BASE64处理后）："</span><span class="token operator">+</span> <span class="token function">getPublicKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"私钥为（BASE64处理后）："</span><span class="token operator">+</span> <span class="token function">getPrivateKey</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 加密</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicKeyEncrypt <span class="token operator">=</span> <span class="token function">publicKeyEncrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> base64PublicKeyEncrypt <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>publicKeyEncrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"公钥加密密文(BASE64 处理之后)："</span><span class="token operator">+</span>base64PublicKeyEncrypt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 解密</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> privateKeyDecrypt <span class="token operator">=</span> <span class="token function">privateKeyDecrypt</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64PublicKeyEncrypt<span class="token punctuation">)</span><span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> decrypted <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>privateKeyDecrypt<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"私钥解密之后((UTF-8 处理之后)："</span><span class="token operator">+</span> decrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><pre class="line-numbers language-log" data-language="log"><code class="language-log">公钥： MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtnAl229x43yLJVn26PifLbpflYkwOuYzaOS+ij5hmgjmsjwKsQTvB60WA9ET9qgP1Y4EX1LJoAUfGOg5c4fgDloUz5bq6rRI7+GVfXatOIMfaTdWYxCW&#x2F;EGUE3IBci8dq14sY3neXALzhwKQLsirt76MAGojDQ3VoL5wEp&#x2F;ZbE9QxUo4Fj9rLIfjEy+&#x2F;MWXzUzedh1hqAJdtIydLUdXd4oVordK1UKXAc3g9K3rk3ZbE8wTe7tz5dh0XQr9lbo8+eR4X8b6cJT&#x2F;bzhZsffZs55ZjvdNIcMdaT1IxycypmmUZCNAVl+KGQ0hiAA1CG&#x2F;Qk6R0ep1fPwfEk0xgrkdwIDAQAB
私钥： MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC2cCXbb3HjfIslWfbo+J8tul+ViTA65jNo5L6KPmGaCOayPAqxBO8HrRYD0RP2qA&#x2F;VjgRfUsmgBR8Y6Dlzh+AOWhTPlurqtEjv4ZV9dq04gx9pN1ZjEJb8QZQTcgFyLx2rXixjed5cAvOHApAuyKu3vowAaiMNDdWgvnASn9lsT1DFSjgWsh+P+IETL78xZfNTN52HWGoAl20jJ0tR1d3ihWit0rVQpcBzeD0reuTdlsTzBN7u3Pl2HRdCv2Vujz55HhfxvpwlP9vOFmx99mznlmO900hwx1pPUjHJzKmaZRkI0BWX4oZDSGIADUIb9CTpHR6nV8&#x2F;B8STTGCuR3AgMBAAECggEAbHw11s3ngGnf6F8d9x1Ysn2AN1Cz8GJRMc&#x2F;MCjLcIRen71bK2MbhSMRBMhXS9Dqt58SijviQ0uoYutvkxfGHZ6FjfKn2mYiJUrPnDAtVKCS4uf1hDlmgHvL0FbgWagrgbrX6WVDvy&#x2F;EpVSBOErPbgND7OYfjvfB7FzIHPNv3E3L2W2ZMuUaQC+MW8Ui+m7S0hgaCb4TRTEAfaHhYkIIMmy4YMMEweSFwTulZ99dUzDI4U+3MT9W+eMaq&#x2F;kPk9nLdZJB4I+Q7KHDP6OiUbrU4qQEkGeISkeFO46NP0wgxYHB+jHiXo9Dbr2mnernDAIBltkXSZ4dm5&#x2F;6Ig2UDzHw6qQKBgQD+TCQ63AOZ4sP4Z171iLFw9zBiH+lvuEqfyTMPP0VKM98pmGSs6m&#x2F;Co1GSRrzhXNu4g8B+mH4XvxJJoDDoe&#x2F;4mAUCLomPTOaOMOAzON8HddGhTCu5uKKjsFIYsP7fgL9wleiU8RQpA&#x2F;HnOIbkR4DgkbHxG8cEyVXSN&#x2F;lA&#x2F;p0eSwwKBgQC3qNdsW5osHwNxiN7OGaxH6KCsKHnEDDYACKDVnWAlyePopSq&#x2F;YWAa9Txnn4SfDDHgnXAsSmJgRciqCYzFFR8CUmKitQcn0g21KwpRgUKEWS8jFcXL1gtzn9T7wyedIWQOks7UztXw5c&#x2F;ckXosotA+NR0EYNhLN8Gd0tp9QKikPQKBgGVL+1qe7ahNFndK5h60lspDDTjpMVnZdZB02ywFrhpC03CETgY7VM2ZtRKpru+ux6+WfAVxxTi8WhKOBy10xuZotUdqJo2rdiSS5zb2KvmGN1BtGFE1TSTNgCz8LMjXB8C+CTsa3VzJtdOQx2IBiRupQ1AXWTgtpkIxvdG9Vtt1AoGACXGrMi07rk0h9jKdkmeLjl8N9AxYxpYCKNpIuvNOwGKzT4E+w3yUXo6BvqpbPXp5Dh3KaNyiVmUAPo4jKPc&#x2F;EvV9kPRSG+AXSFugOjS1YOzdGabC9wpYqGdtokyUuuW+qWkvLY49PhfzKlpot+bfYnOEvHbmaGfDkwQGrC4o&#x2F;dkCgYAJe6Bn4pvnLWXYHaDmARjP&#x2F;VEGq1i+8OgiJcVi+eNorkDoQjcGjo2ETCr3F3Z28QFEG14C9kdHQXKQNPKawzbzoMG40TqXmS9aw4rkIFX&#x2F;6MtUugUyjmbYBmsHyuVE5AYfYsYY6AqPArCf2x7rFPKhdHZVHcJ1GZgMl0P1Tydg3A&#x3D;&#x3D;
公钥加密密文(经 BASE64 处理)：FBlv0Zzi1LFn5AWRC3yxnfX74&#x2F;aHhU8EB0viBJJiDbXfGCecahOXh0T48XzX1mbaIWf&#x2F;MtgJJek2&#x2F;oUN&#x2F;+XCZ6CYFkYwcVLZ+H7QSDSARCcjrLyYQtZhhBDkXkrwfqO2VlD5JM+cMOTGiVZWFxTH884ztLzAMWmagNJ7Rg4Ej1F+BFFehGdMK24FZ5qP2s3V3aLppJCI0ssXx0aTRGwyjswEwr2utslcEMlLjp&#x2F;NBJti9R3o4FoXmz0sR00l64kTRQoB8HCV1d2Su2oDs78SYJ+wOs5t4katFuUDc1XGB&#x2F;xs+N9sqz3rI8yLfpHqS7pEs33CmBhR6BNg&#x3D;&#x3D;
私钥解密之后的明文：kldfajdjfjsdf+-**?&#x2F;calk@1239
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="C-RSA加解密"><a href="#C-RSA加解密" class="headerlink" title="C++ RSA加解密"></a>C++ RSA加解密</h2><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><ul>
<li><a href="https://www.openssl.org/">openssl</a></li>
<li>下载<a href="https://www.openssl.org/source/openssl-1.1.1k.tar.gz">openssl-1.1.1k.tar.gz</a></li>
<li>安装：<ol>
<li>解压文件至任意目录：如 /home/openssl-1.1.1k</li>
<li><code>cd /home/openssl-1.1.1k</code></li>
<li><code>./config</code></li>
<li><code>sudo make install</code></li>
<li><code>g++ *.cpp -L /home/openssl-1.1.1k -l ssl -l crypto</code></li>
</ol>
</li>
</ul>
<h3 id="代码实现-C"><a href="#代码实现-C" class="headerlink" title="代码实现-C++"></a>代码实现-C++</h3><h4 id="源代码地址-https-gist-github-com-superwills-5415344"><a href="#源代码地址-https-gist-github-com-superwills-5415344" class="headerlink" title="源代码地址(https://gist.github.com/superwills/5415344)"></a>源代码地址(<a href="https://gist.github.com/superwills/5415344">https://gist.github.com/superwills/5415344</a>)</h4><h4 id="CMakeLists-txt内容"><a href="#CMakeLists-txt内容" class="headerlink" title="CMakeLists.txt内容"></a>CMakeLists.txt内容</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">3.19</span><span class="token punctuation">)</span>
<span class="token function">project</span><span class="token punctuation">(</span>c_test<span class="token punctuation">)</span>
<span class="token function">set</span><span class="token punctuation">(</span>CMAKE_CXX_STANDARD <span class="token number">14</span><span class="token punctuation">)</span>
<span class="token function">set</span><span class="token punctuation">(</span>INC_DIR <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>opt<span class="token operator">/</span>openssl<span class="token operator">/</span>include<span class="token punctuation">)</span>
<span class="token function">set</span><span class="token punctuation">(</span>LINK_DIR <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>opt<span class="token operator">/</span>openssl<span class="token operator">/</span>lib<span class="token punctuation">)</span>
<span class="token function">include_directories</span><span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span>INC_DIR<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token function">link_directories</span><span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span>LINK_DIR<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token function">link_libraries</span><span class="token punctuation">(</span>ssl crypto<span class="token punctuation">)</span>
<span class="token function">add_executable</span><span class="token punctuation">(</span>c_test main<span class="token punctuation">.</span>cpp base_64<span class="token punctuation">.</span>h base_64<span class="token punctuation">.</span>cpp base64<span class="token punctuation">.</span>h<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="base64-h"><a href="#base64-h" class="headerlink" title="base64.h"></a><a href="https://github.com/superwills/NibbleAndAHalf/blob/master/NibbleAndAHalf/base64.h">base64.h</a></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
  https://github.com/superwills/NibbleAndAHalf
  base64.h -- Fast base64 encoding and decoding.
  version 1.0.0, April 17, 2013 143a
  Copyright (C) 2013 William Sherif
  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.
  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:
  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
  William Sherif
  will.sherif@gmail.com
  YWxsIHlvdXIgYmFzZSBhcmUgYmVsb25nIHRvIHVz
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">BASE64_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BASE64_H</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>b64 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><span class="token punctuation">;</span>

<span class="token comment">// maps A=>0,B=>1..</span>
<span class="token keyword">const</span> <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> unb64<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//10</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//20</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//30</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//40</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token comment">//50</span>
        <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//60</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">//70</span>
        <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token comment">//80</span>
        <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token comment">//90</span>
        <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token comment">//100</span>
        <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token comment">//110</span>
        <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token comment">//120</span>
        <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//130</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//140</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//150</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//160</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//170</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//180</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//190</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//200</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//210</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//220</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//230</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//240</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//250</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// This array has 256 elements</span>

<span class="token comment">// Converts binary data of length=len to base64 characters.</span>
<span class="token comment">// Length of the resultant string is stored in flen</span>
<span class="token comment">// (you must pass pointer flen).</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">base64</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>binaryData<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>flen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>bin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> binaryData<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>res<span class="token punctuation">;</span>

    <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// result counter</span>
    <span class="token keyword">int</span> byteNo<span class="token punctuation">;</span> <span class="token comment">// I need this after the loop</span>

    <span class="token keyword">int</span> modulusLen <span class="token operator">=</span> len <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pad <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>modulusLen <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>modulusLen <span class="token operator">&amp;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 gives 1 and 1 gives 2, but 0 gives 0.</span>

    <span class="token operator">*</span>flen <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>len <span class="token operator">+</span> pad<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
    res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token operator">*</span>flen <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// and one for the null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ERROR: base64 could not allocate enough memory."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I must stop because I could not get enough"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>byteNo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> byteNo <span class="token operator">&lt;=</span> len <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> byteNo <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> BYTE0 <span class="token operator">=</span> bin<span class="token punctuation">[</span>byteNo<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> BYTE1 <span class="token operator">=</span> bin<span class="token punctuation">[</span>byteNo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">char</span> BYTE2 <span class="token operator">=</span> bin<span class="token punctuation">[</span>byteNo <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b64<span class="token punctuation">[</span>BYTE0 <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b64<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x3</span> <span class="token operator">&amp;</span> BYTE0<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>BYTE1 <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b64<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x0f</span> <span class="token operator">&amp;</span> BYTE1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>BYTE2 <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b64<span class="token punctuation">[</span><span class="token number">0x3f</span> <span class="token operator">&amp;</span> BYTE2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pad <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b64<span class="token punctuation">[</span>bin<span class="token punctuation">[</span>byteNo<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b64<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0x3</span> <span class="token operator">&amp;</span> bin<span class="token punctuation">[</span>byteNo<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'='</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'='</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pad <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b64<span class="token punctuation">[</span>bin<span class="token punctuation">[</span>byteNo<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b64<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x3</span> <span class="token operator">&amp;</span> bin<span class="token punctuation">[</span>byteNo<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bin<span class="token punctuation">[</span>byteNo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b64<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0x0f</span> <span class="token operator">&amp;</span> bin<span class="token punctuation">[</span>byteNo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>rc<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'='</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    res<span class="token punctuation">[</span>rc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// NULL TERMINATOR! ;)</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">unbase64</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ascii<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>flen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>safeAsciiPtr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> ascii<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>bin<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> charNo<span class="token punctuation">;</span>
    <span class="token keyword">int</span> pad <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 2 accesses below would be OOB.</span>
        <span class="token comment">// catch empty string, return NULL as result.</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ERROR: You passed an invalid base64 string (too short). You get NULL back."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span>flen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>safeAsciiPtr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">)</span> <span class="token operator">++</span>pad<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>safeAsciiPtr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">)</span> <span class="token operator">++</span>pad<span class="token punctuation">;</span>

    <span class="token operator">*</span>flen <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> len <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">-</span> pad<span class="token punctuation">;</span>
    bin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token operator">*</span>flen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ERROR: unbase64 could not allocate enough memory."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"I must stop because I could not get enough"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>charNo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> charNo <span class="token operator">&lt;=</span> len <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">-</span> pad<span class="token punctuation">;</span> charNo <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> A <span class="token operator">=</span> unb64<span class="token punctuation">[</span>safeAsciiPtr<span class="token punctuation">[</span>charNo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> B <span class="token operator">=</span> unb64<span class="token punctuation">[</span>safeAsciiPtr<span class="token punctuation">[</span>charNo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> C <span class="token operator">=</span> unb64<span class="token punctuation">[</span>safeAsciiPtr<span class="token punctuation">[</span>charNo <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> D <span class="token operator">=</span> unb64<span class="token punctuation">[</span>safeAsciiPtr<span class="token punctuation">[</span>charNo <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        bin<span class="token punctuation">[</span>cb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>B <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bin<span class="token punctuation">[</span>cb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>B <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>C <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bin<span class="token punctuation">[</span>cb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>C <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>pad <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> A <span class="token operator">=</span> unb64<span class="token punctuation">[</span>safeAsciiPtr<span class="token punctuation">[</span>charNo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> B <span class="token operator">=</span> unb64<span class="token punctuation">[</span>safeAsciiPtr<span class="token punctuation">[</span>charNo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> C <span class="token operator">=</span> unb64<span class="token punctuation">[</span>safeAsciiPtr<span class="token punctuation">[</span>charNo <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        bin<span class="token punctuation">[</span>cb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>B <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bin<span class="token punctuation">[</span>cb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>B <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>C <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pad <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> A <span class="token operator">=</span> unb64<span class="token punctuation">[</span>safeAsciiPtr<span class="token punctuation">[</span>charNo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> B <span class="token operator">=</span> unb64<span class="token punctuation">[</span>safeAsciiPtr<span class="token punctuation">[</span>charNo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        bin<span class="token punctuation">[</span>cb<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>A <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>B <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> bin<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/rsa.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/engine.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;openssl/pem.h></span></span>

<span class="token comment">// I'm not using BIO for base64 encoding/decoding.  It is difficult to use.</span>
<span class="token comment">// Using superwills' Nibble And A Half instead</span>
<span class="token comment">// https://github.com/superwills/NibbleAndAHalf/blob/master/NibbleAndAHalf/base64.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"base64.h"</span></span>

<span class="token comment">// The PADDING parameter means RSA will pad your data for you</span>
<span class="token comment">// if it is not exactly the right size</span>
<span class="token comment">//#define PADDING RSA_PKCS1_OAEP_PADDING</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">PADDING RSA_PKCS1_PADDING</span></span>
<span class="token comment">//#define PADDING RSA_NO_PADDING</span>

RSA <span class="token operator">*</span><span class="token function">loadPUBLICKeyFromString</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>publicKeyStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// A BIO is an I/O abstraction (Byte I/O?)</span>

    <span class="token comment">// BIO_new_mem_buf: Create a read-only bio buf with data</span>
    <span class="token comment">// in string passed. -1 means string is null terminated,</span>
    <span class="token comment">// so BIO_new_mem_buf can find the dataLen itself.</span>
    <span class="token comment">// Since BIO_new_mem_buf will be READ ONLY, it's fine that publicKeyStr is const.</span>
    BIO <span class="token operator">*</span>bio <span class="token operator">=</span> <span class="token function">BIO_new_mem_buf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> publicKeyStr<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1: assume string is null terminated</span>

    <span class="token function">BIO_set_flags</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> BIO_FLAGS_BASE64_NO_NL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NO NL</span>

    <span class="token comment">// Load the RSA key from the BIO</span>
    RSA <span class="token operator">*</span>rsaPubKey <span class="token operator">=</span> <span class="token function">PEM_read_bio_RSA_PUBKEY</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rsaPubKey<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: Could not load PUBLIC KEY!  PEM_read_bio_RSA_PUBKEY FAILED: %s\n"</span><span class="token punctuation">,</span>
               <span class="token function">ERR_error_string</span><span class="token punctuation">(</span><span class="token function">ERR_get_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">BIO_free</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rsaPubKey<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

RSA <span class="token operator">*</span><span class="token function">loadPRIVATEKeyFromString</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>privateKeyStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    BIO <span class="token operator">*</span>bio <span class="token operator">=</span> <span class="token function">BIO_new_mem_buf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> privateKeyStr<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//BIO_set_flags( bio, BIO_FLAGS_BASE64_NO_NL ) ; // NO NL</span>
    RSA <span class="token operator">*</span>rsaPrivKey <span class="token operator">=</span> <span class="token function">PEM_read_bio_RSAPrivateKey</span><span class="token punctuation">(</span>bio<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rsaPrivKey<span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: Could not load PRIVATE KEY!  PEM_read_bio_RSAPrivateKey FAILED: %s\n"</span><span class="token punctuation">,</span>
               <span class="token function">ERR_error_string</span><span class="token punctuation">(</span><span class="token function">ERR_get_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">BIO_free</span><span class="token punctuation">(</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> rsaPrivKey<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">rsaEncrypt</span><span class="token punctuation">(</span>RSA <span class="token operator">*</span>pubKey<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> dataSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>resultLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> rsaLen <span class="token operator">=</span> <span class="token function">RSA_size</span><span class="token punctuation">(</span>pubKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>ed <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>rsaLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// RSA_public_encrypt() returns the size of the encrypted data</span>
    <span class="token comment">// (i.e., RSA_size(rsa)). RSA_private_decrypt()</span>
    <span class="token comment">// returns the size of the recovered plaintext.</span>
    <span class="token operator">*</span>resultLen <span class="token operator">=</span> <span class="token function">RSA_public_encrypt</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> str<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> pubKey<span class="token punctuation">,</span> PADDING<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>resultLen <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: RSA_public_encrypt: %s\n"</span><span class="token punctuation">,</span> <span class="token function">ERR_error_string</span><span class="token punctuation">(</span><span class="token function">ERR_get_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ed<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">rsaDecrypt</span><span class="token punctuation">(</span>RSA <span class="token operator">*</span>privKey<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>encryptedData<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>resultLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> rsaLen <span class="token operator">=</span> <span class="token function">RSA_size</span><span class="token punctuation">(</span>privKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// That's how many bytes the decrypted data would be</span>

    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>decryptedBin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>rsaLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>resultLen <span class="token operator">=</span> <span class="token function">RSA_private_decrypt</span><span class="token punctuation">(</span><span class="token function">RSA_size</span><span class="token punctuation">(</span>privKey<span class="token punctuation">)</span><span class="token punctuation">,</span> encryptedData<span class="token punctuation">,</span> decryptedBin<span class="token punctuation">,</span> privKey<span class="token punctuation">,</span> PADDING<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>resultLen <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: RSA_private_decrypt: %s\n"</span><span class="token punctuation">,</span> <span class="token function">ERR_error_string</span><span class="token punctuation">(</span><span class="token function">ERR_get_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> decryptedBin<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">makeAlphaString</span><span class="token punctuation">(</span><span class="token keyword">int</span> dataSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">65</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>
    s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//NULL TERMINATOR ;)</span>

    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// You may need to encrypt several blocks of binary data (each has a maximum size</span>
<span class="token comment">// limited by pubKey).  You shoudn't try to encrypt more than</span>
<span class="token comment">// RSA_LEN( pubKey ) bytes into some packet.</span>
<span class="token comment">// returns base64( rsa encrypt( &lt;&lt;binary data>> ) )</span>
<span class="token comment">// base64OfRsaEncrypted()</span>
<span class="token comment">// base64StringOfRSAEncrypted</span>
<span class="token comment">// rsaEncryptThenBase64</span>
<span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">rsaEncryptThenBase64</span><span class="token punctuation">(</span>RSA <span class="token operator">*</span>pubKey<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>binaryData<span class="token punctuation">,</span> <span class="token keyword">int</span> binaryDataLen<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>outLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> encryptedDataLen<span class="token punctuation">;</span>

    <span class="token comment">// RSA encryption with public key</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>encrypted <span class="token operator">=</span> <span class="token function">rsaEncrypt</span><span class="token punctuation">(</span>pubKey<span class="token punctuation">,</span> binaryData<span class="token punctuation">,</span> binaryDataLen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>encryptedDataLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// To base 64</span>
    <span class="token keyword">int</span> asciiBase64EncLen<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>asciiBase64Enc <span class="token operator">=</span> <span class="token function">base64</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span> encryptedDataLen<span class="token punctuation">,</span> <span class="token operator">&amp;</span>asciiBase64EncLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Destroy the encrypted data (we are using the base64 version of it)</span>
    <span class="token function">free</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Return the base64 version of the encrypted data</span>
    <span class="token keyword">return</span> asciiBase64Enc<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// rsaDecryptOfUnbase64()</span>
<span class="token comment">// rsaDecryptBase64String()</span>
<span class="token comment">// unbase64ThenRSADecrypt()</span>
<span class="token comment">// rsaDecryptThisBase64()</span>
<span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">rsaDecryptThisBase64</span><span class="token punctuation">(</span>RSA <span class="token operator">*</span>privKey<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>base64String<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>outLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> encBinLen<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>encBin <span class="token operator">=</span> <span class="token function">unbase64</span><span class="token punctuation">(</span>base64String<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">strlen</span><span class="token punctuation">(</span>base64String<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>encBinLen<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// rsaDecrypt assumes length of encBin based on privKey</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>decryptedBin <span class="token operator">=</span> <span class="token function">rsaDecrypt</span><span class="token punctuation">(</span>privKey<span class="token punctuation">,</span> encBin<span class="token punctuation">,</span> outLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>encBin<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> decryptedBin<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">ERR_load_crypto_strings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"We are going to: rsa_decrypt( unbase64( base64( rsa_encrypt( &lt;&lt;binary data>> ) ) ) )"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// public key</span>
    <span class="token comment">// http://srdevspot.blogspot.ca/2011/08/openssl-error0906d064pem.html</span>
    <span class="token comment">//1. The file must contain:</span>
    <span class="token comment">//-----BEGIN CERTIFICATE-----</span>
    <span class="token comment">//on a separate line (i.e. it must be terminated with a newline).</span>
    <span class="token comment">//2. Each line of "gibberish" must be 64 characters wide.</span>
    <span class="token comment">//3. The file must end with:</span>
    <span class="token comment">//-----END CERTIFICATE-----</span>
    <span class="token comment">// YOUR PUBLIC KEY MUST CONTAIN NEWLINES.  If it doesn't (ie if you generated it with</span>
    <span class="token comment">// something like</span>
    <span class="token comment">// ssh-keygen -t rsa -C "you@example.com"</span>
    <span class="token comment">// ) THEN YOU MUST INSERT NEWLINES EVERY 64 CHRS (just line it up with how I have it here</span>
    <span class="token comment">// or with how the ssh-keygen private key is formatted by default)</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>b64_pKey <span class="token operator">=</span> <span class="token string">"-----BEGIN PUBLIC KEY-----\n"</span>
                           <span class="token string">"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3zEZvnmvHhFMRuRt9XwLdvlrdAMvUJU4AeGUV59MYu4ZmM0drkHcpQR5nOMRq9nmeWtKKxM2oD/RSrGZ6EftfBgUD/vYZHwtstbtYNhM2eT5CQuTEnbSa86LItkjRwELfFnIoEKClitMGy8Nkk0dyJeqqFbF1tO3Xu/xCMqOS/rdK3YPEnpdwKYX07zrCy1MX9gMAirmOwm8h7XfP/WvM6EGT2BcmfTlcajwjZ15EHHl3aTzjCuwxzeMbt39f1p0Bx/zZBIt/yjjuX6FfiWfpKHYRPWqrVnp0wh7xbhIc9AOKU3OsQGNDby828kV6B03tixRJfbejMIJ3gVgTubg2wIDAQAB\n"</span>
                           <span class="token string">"-----END PUBLIC KEY-----\n"</span><span class="token punctuation">;</span>

    <span class="token comment">// private key</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>b64priv_key <span class="token operator">=</span> <span class="token string">"-----BEGIN RSA PRIVATE KEY-----\n"</span>
                              <span class="token string">"MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDfMRm+ea8eEUxG5G31fAt2+Wt0Ay9QlTgB4ZRXn0xi7hmYzR2uQdylBHmc4xGr2eZ5a0orEzagP9FKsZnoR+18GBQP+9hkfC2y1u1g2EzZ5PkJC5MSdtJrzosi2SNHAQt8WcigQoKWK0wbLw2STR3Il6qoVsXW07de7/EIyo5L+t0rdg8Sel3AphfTvOsLLUxf2AwCKuY7CbyHtd8/9a8zoQZPYFyZ9OVxqPCNnXkQceXdpPOMK7DHN4xu3f1/WnQHH/NkEi3/KOO5foV+JZ+kodhE9aqtWenTCHvFuEhz0A4pTc6xAY0NvLzbyRXoHTe2LFEl9t6MwgneBWBO5uDbAgMBAAECggEBAJCHlDszQ0I+Q124+Le6DxaJJ5sloNMW/gDB2jTvlCCQPQUk9m5sefxmLHZ62GunnEbOQmYod/xHtzkeTyMKyO/OC9fZ52QSwekIowlOqF2Fl/rSgve2+EYVpyX25JBLTevFnFSjHTsvaIZF7wzpYTsPc9S09EJMMXeJ+1UNDh6GbESknJvGPTpICdWcKbaArlqKFjiCeEZLwej5pIqQ5zgZ3Kk/1Hm6b1ut0EYblDoPFPto1sp+MzzDvyp8g/uwFUW+UvhbK69r73eyM4+S5LH1fqXq2/q+7V9IvOaz6D+BpDGqINia3ko49N4OdaUVt7uO7RGrXFW4D1lGoK0VqQkCgYEA92vErW0qsTRBpNtTHiXmHe6+/HVzqj7jZMkUL187KvioJqRgc2JxuAAT2HhJt1xuEeKtIGXJ/DSISXv3JS191nc9yG7ofWpxWw20T0LjdsZxnIa8I9Zq1pO0t2ir9N8VkJ2mMMxrJAlQTmA9Q3MpOXB6AmGXHN9rLlMdpdk7saUCgYEA5u5DGXZW6aIbTVZxasWklCGOCEb8TFJQN4pY59M7XYcfO9tyfO+K/RneCRsZ0k5Sjcr6IL1tfOPcH5GTBmFdNbsmFHQY6fxVh5NOpyrdwh9gip+dRQG1bMOFna0oIQ8UevrhXB0QBpoCHR1F71qQ7YBIfkj6HsV4wIW8Wed2wH8CgYEAmAfibGZeC1D+3RvfsPC8u7vOIzbQgdXuyCk+e/VaWAc+26+5jGz7T4LMrwEK2t6yy86rbvLc8FofPHgt3uxbHINctWJg/V+Ak+CR4PpK5tr9SJ8J0EOalotgSirJLsg9agVU7ztMwnHupJpCSsXimObiMcBhqF4ob+immRgos/kCgYEAoy9E/S4xtoEV9+2Y0dF+PisD+fdne+tCwiyiLJeIwMumF5835O9E8RuhWh/rfEBad9YyMIaLYxCFUU2GbqDIxBpOi2+K13W3XsmKb/iLogyYJP0rnkLZ2FTGC6j7zXihiVHVhEkJNREJY1d3Pu9psFrRX2PkU3BJpwoaEhHNSbMCgYBWhuOmG9SwLtQQlluFYHy2RUmXA/nCplp/TarVmeGyoPqtKaBQ5dMAYvAJ7YQKm9VDL5ij8/0SQ9hvk7yk9/mdUbcivqj4vQUMSezsgJMEucLrDZwczIv0Fm62CUEk+LdayowALGyLWYBcnXtLIYn5mFv+7Rk/kyuYiMsIIvMBLg==\n"</span>
                              <span class="token string">"-----END RSA PRIVATE KEY-----\n"</span><span class="token punctuation">;</span>

    <span class="token comment">// String to encrypt, INCLUDING NULL TERMINATOR:</span>
    <span class="token keyword">int</span> dataSize <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token comment">// 128 for NO PADDING, __ANY SIZE UNDER 128 B__ for RSA_PKCS1_PADDING</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token function">makeAlphaString</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThe original data is:\n%s\n\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// LOAD PUBLIC KEY</span>
    RSA <span class="token operator">*</span>pubKey <span class="token operator">=</span> <span class="token function">loadPUBLICKeyFromString</span><span class="token punctuation">(</span>b64_pKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> asciiB64ELen<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>asciiB64E <span class="token operator">=</span> <span class="token function">rsaEncryptThenBase64</span><span class="token punctuation">(</span>pubKey<span class="token punctuation">,</span> str<span class="token punctuation">,</span> dataSize<span class="token punctuation">,</span> <span class="token operator">&amp;</span>asciiB64ELen<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">RSA_free</span><span class="token punctuation">(</span>pubKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// free the public key when you are done all your encryption</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sending base64_encoded ( rsa_encrypted ( &lt;&lt;binary data>> ) ):\n%s\n"</span><span class="token punctuation">,</span> asciiB64E<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;----------------  SENDING DATA ACROSS INTERWEBS  ---------------->>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> <span class="token operator">*</span>rxOverHTTP <span class="token operator">=</span> asciiB64E<span class="token punctuation">;</span> <span class="token comment">// Simulate Internet connection by a pointer reference</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nRECEIVED some base64 string:\n%s\n"</span><span class="token punctuation">,</span> rxOverHTTP<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\n * * * What could it be?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Now decrypt this very string with the private key</span>
    RSA <span class="token operator">*</span>privKey <span class="token operator">=</span> <span class="token function">loadPRIVATEKeyFromString</span><span class="token punctuation">(</span>b64priv_key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Now we got the data at the server.  Time to decrypt it.</span>
    <span class="token keyword">int</span> rBinLen<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>rBin <span class="token operator">=</span> <span class="token function">rsaDecryptThisBase64</span><span class="token punctuation">(</span>privKey<span class="token punctuation">,</span> rxOverHTTP<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rBinLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Decrypted %d bytes, the recovered data is:\n%.*s\n\n"</span><span class="token punctuation">,</span> rBinLen<span class="token punctuation">,</span> rBinLen<span class="token punctuation">,</span>
           rBin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rBin is not necessarily NULL</span>
    <span class="token comment">// terminated, so we only print rBinLen chrs</span>

    <span class="token function">RSA_free</span><span class="token punctuation">(</span>privKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

    bool allEq <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        allEq <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> rBin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>allEq<span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"DATA TRANSFERRED INTACT!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"ERROR, recovered binary does not match sent binary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">free</span><span class="token punctuation">(</span>asciiB64E<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rxOverHTTP</span>
    <span class="token function">free</span><span class="token punctuation">(</span>rBin<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ERR_free_strings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>后台</category>
      </categories>
  </entry>
  <entry>
    <title>写出优雅的JS代码</title>
    <url>/2020/12/08/CleanCodeJs/</url>
    <content><![CDATA[<p>内容来源于github clean-code-javascript 翻译的中文版本<a href="https://github.com/alivebao/clean-code-js">alivebao/clean-code-js</a><br>感觉翻译的很好，收藏下来，结合最新的英文版做了一些修改。<br>Original Repository: <a href="https://github.com/ryanmcdermott/clean-code-javascript">ryanmcdermott/clean-code-javascript</a></p>
<a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/ryanmcdermott">作者</a>根据 Robert C. Martin <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"><em>《代码整洁之道》</em></a>总结了适用于 JavaScript 的软件工程原则<a href="https://github.com/ryanmcdermott/clean-code-javascript">《Clean Code JavaScript》</a>。</p>
<p>本文是对其的翻译。</p>
<p>不必严格遵守本文的所有原则，有时少遵守一些效果可能会更好，具体应根据实际情况决定。这是根据《代码整洁之道》作者多年经验整理的代码优化建议，但也仅仅只是一份建议。</p>
<p>软件工程已经发展了 50 多年，至今仍在不断前进。现在，把这些原则当作试金石，尝试将他们作为团队代码质量考核的标准之一吧。</p>
<p>最后你需要知道的是，这些东西不会让你立刻变成一个优秀的工程师，长期奉行他们也并不意味着你能够高枕无忧不再犯错。千里之行，始于足下。我们需要时常和同行们进行代码评审，不断优化自己的代码。不要惧怕改善代码质量所需付出的努力，加油。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><h3 id="使用有意义，可读性好的变量名"><a href="#使用有意义，可读性好的变量名" class="headerlink" title="使用有意义，可读性好的变量名"></a>使用有意义，可读性好的变量名</h3><p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> yyyymmdstr <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY/MM/DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> currentDate <span class="token operator">=</span> <span class="token function">moment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'YYYY/MM/DD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h3 id="使用-ES6-的-const-定义常量"><a href="#使用-ES6-的-const-定义常量" class="headerlink" title="使用 ES6 的 const 定义常量"></a>使用 ES6 的 const 定义常量</h3><p>反例中使用”var”定义的”常量”是可变的。</p>
<p>在声明一个常量时，该常量在整个程序中都应该是不可变的。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token constant">FIRST_US_PRESIDENT</span> <span class="token operator">=</span> <span class="token string">"George Washington"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">FIRST_US_PRESIDENT</span> <span class="token operator">=</span> <span class="token string">"George Washington"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h3 id="对功能类似的变量名采用统一的命名风格"><a href="#对功能类似的变量名采用统一的命名风格" class="headerlink" title="对功能类似的变量名采用统一的命名风格"></a>对功能类似的变量名采用统一的命名风格</h3><p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getClientData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getCustomerRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h3 id="使用易于检索名称"><a href="#使用易于检索名称" class="headerlink" title="使用易于检索名称"></a>使用易于检索名称</h3><p>我们需要阅读的代码远比自己写的要多，使代码拥有良好的可读性且易于检索非常重要。阅读变量名晦涩难懂的代码对读者来说是一种相当糟糕的体验。<br>让你的变量名易于检索。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 86400000 是什么鬼?</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>blastOff<span class="token punctuation">,</span> <span class="token number">86400000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 声明为大写的常量.</span>
<span class="token keyword">const</span> <span class="token constant">MILLISECONDS_IN_A_DAY</span> <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">//86400000;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span>blastOff<span class="token punctuation">,</span> <span class="token constant">MILLISECONDS_IN_A_DAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="使用说明变量-即有意义的变量名"><a href="#使用说明变量-即有意义的变量名" class="headerlink" title="使用说明变量(即有意义的变量名)"></a>使用说明变量(即有意义的变量名)</h3><p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token string">"One Infinite Loop, Cupertino 95014"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cityZipCodeRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^,\\]+[,\\\s]+(.+?)\s*(\d&#123;5&#125;)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token function">saveCityZipCode</span><span class="token punctuation">(</span>
  address<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>cityZipCodeRegex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  address<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>cityZipCodeRegex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> address <span class="token operator">=</span> <span class="token string">"One Infinite Loop, Cupertino 95014"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cityZipCodeRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[^,\\]+[,\\\s]+(.+?)\s*(\d&#123;5&#125;)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>_<span class="token punctuation">,</span> city<span class="token punctuation">,</span> zipCode<span class="token punctuation">]</span> <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>cityZipCodeRegex<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">saveCityZipCode</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> zipCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="不要绕太多的弯子"><a href="#不要绕太多的弯子" class="headerlink" title="不要绕太多的弯子"></a>不要绕太多的弯子</h3><p>显式优于隐式。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Austin'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'San Francisco'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
locations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">l</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">doSomeOtherStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token operator">...</span>
  <span class="token operator">...</span>
  <span class="token comment">// l是什么？</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> locations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Austin'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">,</span> <span class="token string">'San Francisco'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
locations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">doSomeOtherStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token operator">...</span>
  <span class="token operator">...</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="避免重复的描述"><a href="#避免重复的描述" class="headerlink" title="避免重复的描述"></a>避免重复的描述</h3><p>当类/对象名已经有意义时，对其变量进行命名不需要再次重复。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Car <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  carMake<span class="token operator">:</span> <span class="token string">'Honda'</span><span class="token punctuation">,</span>
  carModel<span class="token operator">:</span> <span class="token string">'Accord'</span><span class="token punctuation">,</span>
  carColor<span class="token operator">:</span> <span class="token string">'Blue'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">paintCar</span><span class="token punctuation">(</span><span class="token parameter">car</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  car<span class="token punctuation">.</span>carColor <span class="token operator">=</span> <span class="token string">'Red'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Car <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  make<span class="token operator">:</span> <span class="token string">'Honda'</span><span class="token punctuation">,</span>
  model<span class="token operator">:</span> <span class="token string">'Accord'</span><span class="token punctuation">,</span>
  color<span class="token operator">:</span> <span class="token string">'Blue'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">paintCar</span><span class="token punctuation">(</span><span class="token parameter">car</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  car<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'Red'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="使用默认值而不要使用短路运算符或条件语句"><a href="#使用默认值而不要使用短路运算符或条件语句" class="headerlink" title="使用默认值而不要使用短路运算符或条件语句"></a>使用默认值而不要使用短路运算符或条件语句</h3><p>默认参数通常比短路更清晰。需要注意的是，使用它只会对 <code>undefined</code>类型进行替换。像 <code>&#39;&#39;</code> <code>&quot;&quot;</code> <code>false</code> <code>null</code> <code>0</code> 和 <code>NaN</code>并不会被替换<br><strong>反例</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createMicrobrewery</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> breweryName <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">"Hipster Brew Co."</span><span class="token punctuation">;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>正例</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createMicrobrewery</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Hipster Brew Co."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h2><h3 id="函数参数-理想情况下应不超过-2-个"><a href="#函数参数-理想情况下应不超过-2-个" class="headerlink" title="函数参数 (理想情况下应不超过 2 个)"></a>函数参数 (理想情况下应不超过 2 个)</h3><p>限制函数参数数量很有必要，这么做使得在测试函数时更加轻松。过多的参数将导致难以采用有效的测试用例对函数的各个参数进行测试。</p>
<p>应避免三个以上参数的函数。通常情况下，参数超过两个意味着函数功能过于复杂，这时需要重新优化你的函数。当确实需要多个参数时，大多情况下可以考虑这些参数封装成一个对象。</p>
<p>JS 定义对象非常方便，当需要多个参数时，可以使用一个对象进行替代。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token parameter">title<span class="token punctuation">,</span> body<span class="token punctuation">,</span> buttonText<span class="token punctuation">,</span> cancellable</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> menuConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> <span class="token string">'Bar'</span><span class="token punctuation">,</span>
  buttonText<span class="token operator">:</span> <span class="token string">'Baz'</span><span class="token punctuation">,</span>
  cancellable<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token parameter">menuConfig</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="函数功能的单一性"><a href="#函数功能的单一性" class="headerlink" title="函数功能的单一性"></a>函数功能的单一性</h3><p>这是软件功能中最重要的原则之一。</p>
<p>功能不单一的函数将导致难以重构、测试和理解。功能单一的函数易于重构，并使代码更加干净。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">emailClients</span><span class="token punctuation">(</span><span class="token parameter">clients</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">client</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> clientRecord <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientRecord<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">email</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">emailActiveClients</span><span class="token punctuation">(</span><span class="token parameter">clients</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  clients<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isActiveClient<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isActiveClient</span><span class="token punctuation">(</span><span class="token parameter">client</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> clientRecord <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> clientRecord<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="函数名应明确表明其功能"><a href="#函数名应明确表明其功能" class="headerlink" title="函数名应明确表明其功能"></a>函数名应明确表明其功能</h3><p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addToDate</span><span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> month</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 很难理解addToDate(date, 1)是什么意思</span>
<span class="token function">addToDate</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addMonthToDate</span><span class="token punctuation">(</span><span class="token parameter">month<span class="token punctuation">,</span> date</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">addMonthToDate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="函数应该只做一层抽象"><a href="#函数应该只做一层抽象" class="headerlink" title="函数应该只做一层抽象"></a>函数应该只做一层抽象</h3><p>当函数的需要的抽象多于一层时通常意味着函数功能过于复杂，需将其进行分解以提高其可重用性和可测试性。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">parseBetterJSAlternative</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token constant">REGEXES</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> statements <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token constant">REGEXES</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">REGEX</span></span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    statements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">statement</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  tokens<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">token</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// lex...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  ast<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// parse...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">parseBetterJSAlternative</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> syntaxTree <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>
  syntaxTree<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// parse...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token constant">REGEXES</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> statements <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token constant">REGEXES</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">REGEX</span></span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    statements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">statement</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> tokens<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token parameter">tokens</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> syntaxTree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  tokens<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">token</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    syntaxTree<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> syntaxTree<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="移除重复的代码"><a href="#移除重复的代码" class="headerlink" title="移除重复的代码"></a>移除重复的代码</h3><p>永远、永远、永远不要在任何循环下有重复的代码。</p>
<p>这种做法毫无意义且潜在危险极大。重复的代码意味着逻辑变化时需要对不止一处进行修改。JS 弱类型的特点使得函数拥有更强的普适性。好好利用这一优点吧。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showDeveloperList</span><span class="token punctuation">(</span><span class="token parameter">developers</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  developers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">developer</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> expectedSalary <span class="token operator">=</span> developer<span class="token punctuation">.</span><span class="token function">calculateExpectedSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> experience <span class="token operator">=</span> developer<span class="token punctuation">.</span><span class="token function">getExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> githubLink <span class="token operator">=</span> developer<span class="token punctuation">.</span><span class="token function">getGithubLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      expectedSalary<span class="token operator">:</span> expectedSalary<span class="token punctuation">,</span>
      experience<span class="token operator">:</span> experience<span class="token punctuation">,</span>
      githubLink<span class="token operator">:</span> githubLink
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">showManagerList</span><span class="token punctuation">(</span><span class="token parameter">managers</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  managers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">manager</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> expectedSalary <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">calculateExpectedSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> experience <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> portfolio <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">getMBAProjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      expectedSalary<span class="token operator">:</span> expectedSalary<span class="token punctuation">,</span>
      experience<span class="token operator">:</span> experience<span class="token punctuation">,</span>
      portfolio<span class="token operator">:</span> portfolio
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showList</span><span class="token punctuation">(</span><span class="token parameter">employees</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  employees<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">employee</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> expectedSalary <span class="token operator">=</span> employee<span class="token punctuation">.</span><span class="token function">calculateExpectedSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> experience <span class="token operator">=</span> employee<span class="token punctuation">.</span><span class="token function">getExperience</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> portfolio<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'manager'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      portfolio <span class="token operator">=</span> employee<span class="token punctuation">.</span><span class="token function">getMBAProjects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      portfolio <span class="token operator">=</span> employee<span class="token punctuation">.</span><span class="token function">getGithubLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      expectedSalary<span class="token operator">:</span> expectedSalary<span class="token punctuation">,</span>
      experience<span class="token operator">:</span> experience<span class="token punctuation">,</span>
      portfolio<span class="token operator">:</span> portfolio
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="采用默认参数精简代码"><a href="#采用默认参数精简代码" class="headerlink" title="采用默认参数精简代码"></a>采用默认参数精简代码</h3><p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">writeForumComment</span><span class="token punctuation">(</span><span class="token parameter">subject<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  subject <span class="token operator">=</span> subject <span class="token operator">||</span> <span class="token string">'No Subject'</span><span class="token punctuation">;</span>
  body <span class="token operator">=</span> body <span class="token operator">||</span> <span class="token string">'No text'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">writeForumComment</span><span class="token punctuation">(</span>subject <span class="token operator">=</span> <span class="token string">'No subject'</span><span class="token punctuation">,</span> body <span class="token operator">=</span> <span class="token string">'No text'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h3 id="使用-Object-assign-设置默认对象"><a href="#使用-Object-assign-设置默认对象" class="headerlink" title="使用 Object.assign 设置默认对象"></a>使用 Object.assign 设置默认对象</h3><p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> menuConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> <span class="token string">"Bar"</span><span class="token punctuation">,</span>
  buttonText<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  cancellable<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  config<span class="token punctuation">.</span>title <span class="token operator">=</span> config<span class="token punctuation">.</span>title <span class="token operator">||</span> <span class="token string">"Foo"</span><span class="token punctuation">;</span>
  config<span class="token punctuation">.</span>body <span class="token operator">=</span> config<span class="token punctuation">.</span>body <span class="token operator">||</span> <span class="token string">"Bar"</span><span class="token punctuation">;</span>
  config<span class="token punctuation">.</span>buttonText <span class="token operator">=</span> config<span class="token punctuation">.</span>buttonText <span class="token operator">||</span> <span class="token string">"Baz"</span><span class="token punctuation">;</span>
  config<span class="token punctuation">.</span>cancellable <span class="token operator">=</span>
    config<span class="token punctuation">.</span>cancellable <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> config<span class="token punctuation">.</span>cancellable <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">createMenu</span><span class="token punctuation">(</span>menuConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> menuConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  title<span class="token operator">:</span> <span class="token string">"Order"</span><span class="token punctuation">,</span>
  <span class="token comment">// User did not include 'body' key</span>
  buttonText<span class="token operator">:</span> <span class="token string">"Send"</span><span class="token punctuation">,</span>
  cancellable<span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createMenu</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> finalConfig <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
    <span class="token punctuation">&#123;</span>
      title<span class="token operator">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>
      body<span class="token operator">:</span> <span class="token string">"Bar"</span><span class="token punctuation">,</span>
      buttonText<span class="token operator">:</span> <span class="token string">"Baz"</span><span class="token punctuation">,</span>
      cancellable<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    config
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> finalConfig
  <span class="token comment">// config now equals: &#123;title: "Order", body: "Bar", buttonText: "Send", cancellable: true&#125;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token function">createMenu</span><span class="token punctuation">(</span>menuConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="不要使用标记-Flag-作为函数参数"><a href="#不要使用标记-Flag-作为函数参数" class="headerlink" title="不要使用标记(Flag)作为函数参数"></a>不要使用标记(Flag)作为函数参数</h3><p>这通常意味着函数的功能的单一性已经被破坏。此时应考虑对函数进行再次划分。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createFile</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> temp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'./temp/'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    fs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createTempFile</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  fs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'./temp/'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>


<span class="token keyword">function</span> <span class="token function">createFile</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  fs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="避免副作用（Part-1）"><a href="#避免副作用（Part-1）" class="headerlink" title="避免副作用（Part 1）"></a>避免副作用（Part 1）</h3><p>当函数产生了除了“接受一个值并返回一个结果”之外的行为时，称该函数产生了副作用。比如写文件、修改全局变量或将你的钱全转给了一个陌生人等。</p>
<p>程序在某些情况下确实需要副作用这一行为，如先前例子中的写文件。这时应该将这些功能集中在一起，不要用多个函数/类修改某个文件。用且只用一个 service 完成这一需求。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下函数引用的全局变量</span>
<span class="token comment">// 如果有另外一个函数也使用了这个变量，</span>
<span class="token comment">// 但是这个变量经过splitIntoFirstAndLastName操作已经从字符串变成了数组，使用它的函数就会受到影响</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Ryan McDermott"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">splitIntoFirstAndLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">splitIntoFirstAndLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['Ryan', 'McDermott'];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">splitIntoFirstAndLastName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"Ryan McDermott"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newName <span class="token operator">=</span> <span class="token function">splitIntoFirstAndLastName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'Ryan McDermott';</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['Ryan', 'McDermott'];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="避免副作用（Part-2）"><a href="#避免副作用（Part-2）" class="headerlink" title="避免副作用（Part 2）"></a>避免副作用（Part 2）</h3><p>在<code>java script</code>中，有些值是不可变的，有些值又是可变的，<code>Objects</code>和<code>Arrays</code>是两种可变的值，因此它们作为函数的参数时，需要很小心的处理它们。<br>一个<code>JavaScript</code>的函数可以修改对象的属性或者修改数组的内容，所以它可以很容易引起其他地方的<code>Bug</code>。<br>假设一个函数的入参是数组对象，数组对象假设是购物车，这个函数修改了购物车里的内容-添加了一个东西。其他任意一个函数使用了这个购物车的参数都会受到影响。<br>这可能会没有什么问题，也可能会导致大问题，让我们想象一个糟糕的场景：</p>
<p>如果一个用户点击了”购买“按钮，这时候会调用”购买函数“来请求网络，发送购物车数据到服务器。如果这时候网络比较慢，购买请求会不断的重复发送。假如这时候用户不小心点了<br>一个不想要的商品到购物车里面，并且这时候购买请求也在发送，那就会购买到用户刚刚不小心点到的商品。</p>
<p>一个好的解决办法就是定义个<code>addItemToCard</code>的函数，这个函数总是返回克隆的 购物车对象。这样可以确保正在使用的购物车对象不会受到更改的影响。</p>
<p>对于这种方式，有两个注意点：</p>
<ol>
<li>在某些情况下，您可能需要修改输入对象，但是当您采用这种编程实践时，您会发现这些情况很少见。大多数事情都可以重构为没有副作用！</li>
<li>就性能而言，克隆大对象可能非常消耗性能。幸运的是，这在实践中并不是一个大问题，因为有很多很好的库可以很快的克隆，而不像手动克隆对象和数组那样占用内存。</li>
</ol>
<p><strong>反例</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">addItemToCart</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cart<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  cart<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> item<span class="token punctuation">,</span> date<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>正例</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">addItemToCart</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cart<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>cart<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> item<span class="token punctuation">,</span> date<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="不要写全局函数"><a href="#不要写全局函数" class="headerlink" title="不要写全局函数"></a>不要写全局函数</h3><p>在 JS 中污染全局是一个非常不好的实践，这么做可能和其他库起冲突，且调用你的 API 的用户在实际环境中得到一个 exception 前对这一情况是一无所知的。</p>
<p>想象以下例子：如果你想扩展 JS 中的 Array，为其添加一个 <code>diff</code> 函数显示两个数组间的差异，此时应如何去做？你可以将 diff 写入 <code>Array.prototype</code>，但这么做会和其他有类似需求的库造成冲突。如果另一个库对 diff 的需求为比较一个数组中首尾元素间的差异呢？</p>
<p>使用 ES6 中的 class 对全局的 Array 做简单的扩展显然是一个更棒的选择。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">diff</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">diff</span><span class="token punctuation">(</span><span class="token parameter">comparisonArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>comparisonArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">elem</span> <span class="token operator">=></span> <span class="token operator">!</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">SuperArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">&#123;</span>
  <span class="token function">diff</span><span class="token punctuation">(</span><span class="token parameter">comparisonArray</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>comparisonArray<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">elem</span> <span class="token operator">=></span> <span class="token operator">!</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="采用函数式编程"><a href="#采用函数式编程" class="headerlink" title="采用函数式编程"></a>采用函数式编程</h3><p>函数式的编程具有更干净且便于测试的特点。尽可能的使用这种风格吧。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> programmerOutput <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'Uncle Bobby'</span><span class="token punctuation">,</span>
    linesOfCode<span class="token operator">:</span> <span class="token number">500</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'Suzie Q'</span><span class="token punctuation">,</span>
    linesOfCode<span class="token operator">:</span> <span class="token number">1500</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'Jimmy Gosling'</span><span class="token punctuation">,</span>
    linesOfCode<span class="token operator">:</span> <span class="token number">150</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">'Gracie Hopper'</span><span class="token punctuation">,</span>
    linesOfCode<span class="token operator">:</span> <span class="token number">1000</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> totalOutput <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> programmerOutput<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  totalOutput <span class="token operator">+=</span> programmerOutput<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>linesOfCode<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> programmerOutput <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"Uncle Bobby"</span><span class="token punctuation">,</span>
    linesOfCode<span class="token operator">:</span> <span class="token number">500</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"Suzie Q"</span><span class="token punctuation">,</span>
    linesOfCode<span class="token operator">:</span> <span class="token number">1500</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"Jimmy Gosling"</span><span class="token punctuation">,</span>
    linesOfCode<span class="token operator">:</span> <span class="token number">150</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#123;</span>
    name<span class="token operator">:</span> <span class="token string">"Gracie Hopper"</span><span class="token punctuation">,</span>
    linesOfCode<span class="token operator">:</span> <span class="token number">1000</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> totalOutput <span class="token operator">=</span> programmerOutput<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token parameter">totalLines<span class="token punctuation">,</span> output</span><span class="token punctuation">)</span> <span class="token operator">=></span> totalLines <span class="token operator">+</span> output<span class="token punctuation">.</span>linesOfCode<span class="token punctuation">,</span>
  <span class="token number">0</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="封装判断条件"><a href="#封装判断条件" class="headerlink" title="封装判断条件"></a>封装判断条件</h3><p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>fsm<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'fetching'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>listNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shouldShowSpinner</span><span class="token punctuation">(</span><span class="token parameter">fsm<span class="token punctuation">,</span> listNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> fsm<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">'fetching'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>listNode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldShowSpinner</span><span class="token punctuation">(</span>fsmInstance<span class="token punctuation">,</span> listNodeInstance<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="避免“否定情况”的判断"><a href="#避免“否定情况”的判断" class="headerlink" title="避免“否定情况”的判断"></a>避免“否定情况”的判断</h3><p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isDOMNodeNotPresent</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDOMNodeNotPresent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isDOMNodePresent</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDOMNodePresent</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="避免条件判断"><a href="#避免条件判断" class="headerlink" title="避免条件判断"></a>避免条件判断</h3><p>这看起来似乎不太可能。</p>
<p>大多人听到这的第一反应是：“怎么可能不用 if 完成其他功能呢？”许多情况下通过使用多态(polymorphism)可以达到同样的目的。</p>
<p>第二个问题在于采用这种方式的原因是什么。答案是我们之前提到过的：保持函数功能的单一性。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Airplane</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token function">getCruisingAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token string">"777"</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPassengerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">"Air Force One"</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">"Cessna"</span><span class="token operator">:</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFuelExpenditure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Airplane</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Boeing777</span> <span class="token keyword">extends</span> <span class="token class-name">Airplane</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token function">getCruisingAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPassengerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">AirForceOne</span> <span class="token keyword">extends</span> <span class="token class-name">Airplane</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token function">getCruisingAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Cessna</span> <span class="token keyword">extends</span> <span class="token class-name">Airplane</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
  <span class="token function">getCruisingAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxAltitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFuelExpenditure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="避免类型判断-part-1"><a href="#避免类型判断-part-1" class="headerlink" title="避免类型判断(part 1)"></a>避免类型判断(part 1)</h3><p>JS 是弱类型语言，这意味着函数可接受任意类型的参数。</p>
<p>有时这会对你带来麻烦，你会对参数做一些类型判断。有许多方法可以避免这些情况。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">travelToTexas</span><span class="token punctuation">(</span><span class="token parameter">vehicle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vehicle <span class="token keyword">instanceof</span> <span class="token class-name">Bicycle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vehicle<span class="token punctuation">.</span><span class="token function">pedal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentLocation<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token string">"texas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vehicle <span class="token keyword">instanceof</span> <span class="token class-name">Car</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    vehicle<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentLocation<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token string">"texas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">travelToTexas</span><span class="token punctuation">(</span><span class="token parameter">vehicle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  vehicle<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentLocation<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Location</span><span class="token punctuation">(</span><span class="token string">"texas"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h3 id="避免类型判断-part-2"><a href="#避免类型判断-part-2" class="headerlink" title="避免类型判断(part 2)"></a>避免类型判断(part 2)</h3><p>如果需处理的数据为字符串，整型，数组等类型，无法使用多态并仍有必要对其进行类型检测时，可以考虑使用 TypeScript。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token keyword">typeof</span> val1 <span class="token operator">===</span> <span class="token string">"number"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val2 <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    <span class="token punctuation">(</span><span class="token keyword">typeof</span> val1 <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val2 <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> val1 <span class="token operator">+</span> val2<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Must be of type String or Number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token parameter">val1<span class="token punctuation">,</span> val2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> val1 <span class="token operator">+</span> val2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h3 id="避免过度优化"><a href="#避免过度优化" class="headerlink" title="避免过度优化"></a>避免过度优化</h3><p>现代的浏览器在运行时会对代码自动进行优化。有时人为对代码进行优化可能是在浪费时间。</p>
<p><a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers">这里可以找到许多真正需要优化的地方</a></p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token comment">// 这里使用变量len是因为在老式浏览器中，</span>
<span class="token comment">// 直接使用正例中的方式会导致每次循环均重复计算list.length的值，</span>
<span class="token comment">// 而在现代浏览器中会自动完成优化，这一行为是没有必要的</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h3 id="删除无效的代码"><a href="#删除无效的代码" class="headerlink" title="删除无效的代码"></a>删除无效的代码</h3><p>不再被调用的代码应及时删除。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">oldRequestModule</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">newRequestModule</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> req <span class="token operator">=</span> newRequestModule<span class="token punctuation">;</span>
<span class="token function">inventoryTracker</span><span class="token punctuation">(</span><span class="token string">"apples"</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> <span class="token string">"www.inventory-awesome.io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">newRequestModule</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> req <span class="token operator">=</span> newRequestModule<span class="token punctuation">;</span>
<span class="token function">inventoryTracker</span><span class="token punctuation">(</span><span class="token string">"apples"</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> <span class="token string">"www.inventory-awesome.io"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a><strong>对象和数据结构</strong></h2><h3 id="使用-getters-和-setters"><a href="#使用-getters-和-setters" class="headerlink" title="使用 getters 和 setters"></a>使用 getters 和 setters</h3><p>JS 没有接口或类型，因此实现这一模式是很困难的，因为我们并没有类似 <code>public</code> 和 <code>private</code> 的关键词。</p>
<p>然而，使用 getters 和 setters 获取对象的数据远比直接使用点操作符具有优势。为什么呢？</p>
<ol>
<li>当需要对获取的对象属性执行额外操作时。</li>
<li>执行 <code>set</code> 时可以增加规则对要变量的合法性进行判断。</li>
<li>封装了内部逻辑。</li>
<li>在存取时可以方便的增加日志和错误处理。</li>
<li>继承该类时可以重载默认行为。</li>
<li>从服务器获取数据时可以进行懒加载。</li>
</ol>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeBankAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    balance<span class="token operator">:</span> <span class="token number">0</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> account <span class="token operator">=</span> <span class="token function">makeBankAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
account<span class="token punctuation">.</span>balance <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeBankAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 私有属性</span>
  <span class="token keyword">let</span> balance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// 通过”getter“方法返回私有属性的值</span>
  <span class="token keyword">function</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> balance<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 通过”setter“方法设置私有属性的值</span>
  <span class="token keyword">function</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token parameter">amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ... 更新balance之前可以做一些验证的逻辑</span>
    balance <span class="token operator">=</span> amount<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
    getBalance<span class="token punctuation">,</span>
    setBalance
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> account <span class="token operator">=</span> <span class="token function">makeBankAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
account<span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="让对象拥有私有成员"><a href="#让对象拥有私有成员" class="headerlink" title="让对象拥有私有成员"></a>让对象拥有私有成员</h3><p>可以通过闭包完成</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Employee</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Employee</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Employee name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Employee name: John Doe</span>
<span class="token keyword">delete</span> employee<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Employee name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Employee name: undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">makeEmployee</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> employee <span class="token operator">=</span> <span class="token function">makeEmployee</span><span class="token punctuation">(</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Employee name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Employee name: John Doe</span>
<span class="token keyword">delete</span> employee<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Employee name: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>employee<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Employee name: John Doe</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="类"><a href="#类" class="headerlink" title="类"></a><strong>类</strong></h2><h3 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则 (SRP)"></a>单一职责原则 (SRP)</h3><p>如《代码整洁之道》一书中所述，“修改一个类的理由不应该超过一个”。</p>
<p>将多个功能塞进一个类的想法很诱人，但这将导致你的类无法达到概念上的内聚，并经常不得不进行修改。</p>
<p>最小化对一个类需要修改的次数是非常有必要的。如果一个类具有太多太杂的功能，当你对其中一小部分进行修改时，将很难想象到这一修够对代码库中依赖该类的其他模块会带来什么样的影响。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">UserSettings</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">changeSettings</span><span class="token punctuation">(</span><span class="token parameter">settings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">verifyCredentials</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">verifyCredentials</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">UserAuth</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">verifyCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">class</span> <span class="token class-name">UserSettings</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>auth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAuth</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">changeSettings</span><span class="token punctuation">(</span><span class="token parameter">settings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>auth<span class="token punctuation">.</span><span class="token function">verifyCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="开-闭原则-OCP"><a href="#开-闭原则-OCP" class="headerlink" title="开/闭原则 (OCP)"></a>开/闭原则 (OCP)</h3><p>“代码实体(类，模块，函数等)应该易于扩展，难于修改。”</p>
<p>这一原则指的是我们应允许用户方便的扩展我们代码模块的功能，而不需要打开 js 文件源码手动对其进行修改。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">AjaxRequester</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// What if we wanted another HTTP Method, like DELETE? We would have to</span>
    <span class="token comment">// open this file up and modify this and put it in manually.</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">HTTP_METHODS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">AjaxRequester</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">HTTP_METHODS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">addHTTPMethod</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">HTTP_METHODS</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="利斯科夫替代原则-LSP"><a href="#利斯科夫替代原则-LSP" class="headerlink" title="利斯科夫替代原则 (LSP)"></a>利斯科夫替代原则 (LSP)</h3><p>“子类对象应该能够替换其超类对象被使用”。</p>
<p>也就是说，如果有一个父类和一个子类，当采用子类替换父类时不应该产生错误的结果。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">area</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> width<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">renderLargeRectangles</span><span class="token punctuation">(</span><span class="token parameter">rectangles</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  rectangles<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">rectangle</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    rectangle<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> area <span class="token operator">=</span> rectangle<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// BAD: Will return 25 for Square. Should be 20.</span>
    rectangle<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> rectangles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">renderLargeRectangles</span><span class="token punctuation">(</span>rectangles<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

  <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">area</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token parameter">width</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">renderLargeShapes</span><span class="token punctuation">(</span><span class="token parameter">shapes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  shapes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">shape</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token string">'Square'</span><span class="token operator">:</span>
        shape<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token string">'Rectangle'</span><span class="token operator">:</span>
        shape<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        shape<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">let</span> area <span class="token operator">=</span> shape<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shape<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> shapes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">renderLargeShapes</span><span class="token punctuation">(</span>shapes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 (ISP)"></a>接口隔离原则 (ISP)</h3><p>“客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。”</p>
<p>在 JS 中，当一个类需要许多参数设置才能生成一个对象时，或许大多时候不需要设置这么多的参数。此时减少对配置参数数量的需求是有益的。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">DOMTraverser</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">settings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>settings <span class="token operator">=</span> settings<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rootNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>settings<span class="token punctuation">.</span>rootNode<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>animationModule<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> $ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMTraverser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  rootNode<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">animationModule</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// Most of the time, we won't need to animate when traversing.</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">DOMTraverser</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">settings</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>settings <span class="token operator">=</span> settings<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> settings<span class="token punctuation">.</span>options<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rootNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>settings<span class="token punctuation">.</span>rootNode<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setupOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setupOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>animationModule<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> $ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMTraverser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  rootNode<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  options<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">animationModule</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="依赖反转原则-DIP"><a href="#依赖反转原则-DIP" class="headerlink" title="依赖反转原则 (DIP)"></a>依赖反转原则 (DIP)</h3><p>该原则有两个核心点：</p>
<ol>
<li>高层模块不应该依赖于低层模块。他们都应该依赖于抽象接口。</li>
<li>抽象接口应该脱离具体实现，具体实现应该依赖于抽象接口。</li>
</ol>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">InventoryTracker</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">items</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> items<span class="token punctuation">;</span>

    <span class="token comment">// BAD: We have created a dependency on a specific request implementation.</span>
    <span class="token comment">// We should just have requestItems depend on a request method: `request`</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>requester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InventoryRequester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">requestItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>requester<span class="token punctuation">.</span><span class="token function">requestItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">InventoryRequester</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">REQ_METHODS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'HTTP'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">requestItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> inventoryTracker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InventoryTracker</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'apples'</span><span class="token punctuation">,</span> <span class="token string">'bananas'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
inventoryTracker<span class="token punctuation">.</span><span class="token function">requestItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">InventoryTracker</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">items<span class="token punctuation">,</span> requester</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> items<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>requester <span class="token operator">=</span> requester<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">requestItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>requester<span class="token punctuation">.</span><span class="token function">requestItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">InventoryRequesterV1</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">REQ_METHODS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'HTTP'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">requestItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">InventoryRequesterV2</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">REQ_METHODS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'WS'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">requestItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// By constructing our dependencies externally and injecting them, we can easily</span>
<span class="token comment">// substitute our request module for a fancy new one that uses WebSockets.</span>
<span class="token keyword">let</span> inventoryTracker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InventoryTracker</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'apples'</span><span class="token punctuation">,</span> <span class="token string">'bananas'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InventoryRequesterV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
inventoryTracker<span class="token punctuation">.</span><span class="token function">requestItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="使用-ES6-的-classes-而不是-ES5-的-Function"><a href="#使用-ES6-的-classes-而不是-ES5-的-Function" class="headerlink" title="使用 ES6 的 classes 而不是 ES5 的 Function"></a>使用 ES6 的 classes 而不是 ES5 的 Function</h3><p>典型的 ES5 的类(function)在继承、构造和方法定义方面可读性较差。</p>
<p>当需要继承时，优先选用 classes。</p>
<p>但是，当在需要更大更复杂的对象时，最好优先选择更小的 function 而非 classes。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">Animal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Instantiate Animal with `new`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">move</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">Mammal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span> furColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Mammal</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Instantiate Mammal with `new`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>furColor <span class="token operator">=</span> furColor<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Mammal</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Mammal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Mammal<span class="token punctuation">;</span>
<span class="token class-name">Mammal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">liveBirth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> <span class="token function-variable function">Human</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span> furColor<span class="token punctuation">,</span> languageSpoken</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Human</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Instantiate Human with `new`"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">Mammal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> furColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>languageSpoken <span class="token operator">=</span> languageSpoken<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token class-name">Human</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Mammal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Human</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Human<span class="token punctuation">;</span>
<span class="token class-name">Human</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Mammal</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span> furColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>furColor <span class="token operator">=</span> furColor<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">liveBirth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token keyword">extends</span> <span class="token class-name">Mammal</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span> furColor<span class="token punctuation">,</span> languageSpoken</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> furColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>languageSpoken <span class="token operator">=</span> languageSpoken<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="使用方法链"><a href="#使用方法链" class="headerlink" title="使用方法链"></a>使用方法链</h3><p>这里我们的理解与《代码整洁之道》的建议有些不同。</p>
<p>有争论说方法链不够干净且违反了<a href="https://en.wikipedia.org/wiki/Law_of_Demeter">德米特法则</a>，也许这是对的，但这种方法在 JS 及许多库(如 JQuery)中显得非常实用。</p>
<p>因此，我认为在 JS 中使用方法链是非常合适的。在 class 的函数中返回 this，能够方便的将类需要执行的多个方法链接起来。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> <span class="token string">'Honda'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token string">'Accord'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setMake</span><span class="token punctuation">(</span><span class="token parameter">make</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setModel</span><span class="token punctuation">(</span><span class="token parameter">model</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>make<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
car<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">'pink'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
car<span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span><span class="token string">'Ford'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
car<span class="token punctuation">.</span><span class="token function">setModel</span><span class="token punctuation">(</span><span class="token string">'F-150'</span><span class="token punctuation">)</span>
car<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>make <span class="token operator">=</span> <span class="token string">'Honda'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token string">'Accord'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'white'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setMake</span><span class="token punctuation">(</span><span class="token parameter">make</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token comment">// NOTE: Returning this for chaining</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setModel</span><span class="token punctuation">(</span><span class="token parameter">model</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span>
    <span class="token comment">// NOTE: Returning this for chaining</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
    <span class="token comment">// NOTE: Returning this for chaining</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>make<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">'pink'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setMake</span><span class="token punctuation">(</span><span class="token string">'Ford'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">setModel</span><span class="token punctuation">(</span><span class="token string">'F-150'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="优先使用组合模式而非继承"><a href="#优先使用组合模式而非继承" class="headerlink" title="优先使用组合模式而非继承"></a>优先使用组合模式而非继承</h3><p>在著名的<a href="https://en.wikipedia.org/wiki/Design_Patterns">设计模式</a>一书中提到，应多使用组合模式而非继承。</p>
<p>这么做有许多优点，在想要使用继承前，多想想能否通过组合模式满足需求吧。</p>
<p>那么，在什么时候继承具有更大的优势呢？这取决于你的具体需求，但大多情况下，可以遵守以下三点：</p>
<ol>
<li>继承关系表现为”是一个”而非”有一个”(如动物-&gt;人 和 用户-&gt;用户细节)</li>
<li>可以复用基类的代码(“Human”可以看成是”All animal”的一种)</li>
<li>希望当基类改变时所有派生类都受到影响(如修改”all animals”移动时的卡路里消耗量)</li>
</ol>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> email</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Bad because Employees "have" tax data. EmployeeTaxData is not a type of Employee</span>
<span class="token keyword">class</span> <span class="token class-name">EmployeeTaxData</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">ssn<span class="token punctuation">,</span> salary</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ssn <span class="token operator">=</span> ssn<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> email</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>

  <span class="token punctuation">&#125;</span>

  <span class="token function">setTaxData</span><span class="token punctuation">(</span><span class="token parameter">ssn<span class="token punctuation">,</span> salary</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>taxData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmployeeTaxData</span><span class="token punctuation">(</span>ssn<span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">EmployeeTaxData</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">ssn<span class="token punctuation">,</span> salary</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ssn <span class="token operator">=</span> ssn<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h2><p><a href="http://gotwarlost.github.io/istanbul/">一些好的覆盖工具</a>。</p>
<p><a href="http://jstherightway.org/#testing-tools">一些好的 JS 测试框架</a>。</p>
<h3 id="单一的测试每个概念"><a href="#单一的测试每个概念" class="headerlink" title="单一的测试每个概念"></a>单一的测试每个概念</h3><p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> assert <span class="token keyword">from</span> <span class="token string">"assert"</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"MomentJS"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"handles date boundaries"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> date<span class="token punctuation">;</span>

    date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MomentJS</span><span class="token punctuation">(</span><span class="token string">"1/1/2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    date<span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">"1/31/2015"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>

    date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MomentJS</span><span class="token punctuation">(</span><span class="token string">"2/1/2016"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    date<span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">"02/29/2016"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>

    date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MomentJS</span><span class="token punctuation">(</span><span class="token string">"2/1/2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    date<span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">"03/01/2015"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> assert <span class="token keyword">from</span> <span class="token string">"assert"</span><span class="token punctuation">;</span>

<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"MomentJS"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"handles 30-day months"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MomentJS</span><span class="token punctuation">(</span><span class="token string">"1/1/2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    date<span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">"1/31/2015"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"handles leap year"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MomentJS</span><span class="token punctuation">(</span><span class="token string">"2/1/2016"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    date<span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">"02/29/2016"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">"handles non-leap year"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MomentJS</span><span class="token punctuation">(</span><span class="token string">"2/1/2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    date<span class="token punctuation">.</span><span class="token function">addDays</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">"03/01/2015"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a><strong>并发</strong></h2><h3 id="用-Promises-替代回调"><a href="#用-Promises-替代回调" class="headerlink" title="用 Promises 替代回调"></a>用 Promises 替代回调</h3><p>回调不够整洁并会造成大量的嵌套。ES6 内嵌了 Promises，使用它吧。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> get <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"request"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> writeFile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span>

<span class="token function">get</span><span class="token punctuation">(</span>
  <span class="token string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token parameter">requestErr<span class="token punctuation">,</span> response<span class="token punctuation">,</span> body</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestErr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>requestErr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"article.html"</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> <span class="token parameter">writeErr</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>writeErr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>writeErr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"File written"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> get <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"request-promise"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> writeFile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs-extra"</span><span class="token punctuation">;</span>

<span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">body</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"article.html"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"File written"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="Async-Await-是较-Promises-更好的选择"><a href="#Async-Await-是较-Promises-更好的选择" class="headerlink" title="Async/Await 是较 Promises 更好的选择"></a>Async/Await 是较 Promises 更好的选择</h3><p>Promises 是较回调而言更好的一种选择，但 ES7 中的 async 和 await 更胜过 Promises。</p>
<p>在能使用 ES7 特性的情况下可以尽量使用他们替代 Promises。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> get <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"request-promise"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> writeFile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs-extra"</span><span class="token punctuation">;</span>

<span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">body</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"article.html"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"File written"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> get <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"request-promise"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> writeFile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"fs-extra"</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getCleanCodeArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">get</span><span class="token punctuation">(</span>
      <span class="token string">"https://en.wikipedia.org/wiki/Robert_Cecil_Martin"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"article.html"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"File written"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">getCleanCodeArticle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a><strong>错误处理</strong></h2><p>错误抛出是个好东西！这使得你能够成功定位运行状态中的程序产生错误的位置。</p>
<h3 id="别忘了捕获错误"><a href="#别忘了捕获错误" class="headerlink" title="别忘了捕获错误"></a>别忘了捕获错误</h3><p>对捕获的错误不做任何处理是没有意义的。</p>
<p>代码中 <code>try/catch</code> 的意味着你认为这里可能出现一些错误，你应该对这些可能的错误存在相应的处理方案。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token function">functionThatMightThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token function">functionThatMightThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// One option (more noisy than console.log):</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Another option:</span>
  <span class="token function">notifyUserOfError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Another option:</span>
  <span class="token function">reportErrorToService</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// OR do all three!</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="不要忽略被拒绝的-promises"><a href="#不要忽略被拒绝的-promises" class="headerlink" title="不要忽略被拒绝的 promises"></a>不要忽略被拒绝的 promises</h3><p>理由同 <code>try/catch</code>。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">functionThatMightThrow</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">functionThatMightThrow</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// One option (more noisy than console.log):</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Another option:</span>
    <span class="token function">notifyUserOfError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Another option:</span>
    <span class="token function">reportErrorToService</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// OR do all three!</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>




<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a><strong>格式化</strong></h2><p>格式化是一件主观的事。如同这里的许多规则一样，这里并没有一定/立刻需要遵守的规则。可以在<a href="http://standardjs.com/rules.html">这里</a>完成格式的自动化。</p>
<h3 id="大小写一致"><a href="#大小写一致" class="headerlink" title="大小写一致"></a>大小写一致</h3><p>JS 是弱类型语言，合理的采用大小写可以告诉你关于变量/函数等的许多消息。</p>
<p>这些规则是主观定义的，团队可以根据喜欢进行选择。重点在于无论选择何种风格，都需要注意保持一致性。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">DAYS_IN_WEEK</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> daysInMonth <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> songs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Back In Black"</span><span class="token punctuation">,</span> <span class="token string">"Stairway to Heaven"</span><span class="token punctuation">,</span> <span class="token string">"Hey Jude"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Artists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"ACDC"</span><span class="token punctuation">,</span> <span class="token string">"Led Zeppelin"</span><span class="token punctuation">,</span> <span class="token string">"The Beatles"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">eraseDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">restore_database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">animal</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Alpaca</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">DAYS_IN_WEEK</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">DAYS_IN_MONTH</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">SONGS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Back In Black"</span><span class="token punctuation">,</span> <span class="token string">"Stairway to Heaven"</span><span class="token punctuation">,</span> <span class="token string">"Hey Jude"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">ARTISTS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"ACDC"</span><span class="token punctuation">,</span> <span class="token string">"Led Zeppelin"</span><span class="token punctuation">,</span> <span class="token string">"The Beatles"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">eraseDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">restoreDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Alpaca</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="调用函数的函数和被调函数应放在较近的位置"><a href="#调用函数的函数和被调函数应放在较近的位置" class="headerlink" title="调用函数的函数和被调函数应放在较近的位置"></a>调用函数的函数和被调函数应放在较近的位置</h3><p>当函数间存在相互调用的情况时，应将两者置于较近的位置。</p>
<p>理想情况下，应将调用其他函数的函数写在被调用函数的上方。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PerformanceReview</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">employee</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>employee <span class="token operator">=</span> employee<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lookupPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employee<span class="token punctuation">,</span> <span class="token string">"peers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lookupManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employee<span class="token punctuation">,</span> <span class="token string">"manager"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getPeerReviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> peers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lookupPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">perfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPeerReviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getManagerReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getManagerReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lookupManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getSelfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> review <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceReview</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
review<span class="token punctuation">.</span><span class="token function">perfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">PerformanceReview</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">employee</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>employee <span class="token operator">=</span> employee<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">perfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPeerReviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getManagerReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSelfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getPeerReviews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> peers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lookupPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lookupPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employee<span class="token punctuation">,</span> <span class="token string">"peers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getManagerReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lookupManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lookupManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>employee<span class="token punctuation">,</span> <span class="token string">"manager"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getSelfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> review <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerformanceReview</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>
review<span class="token punctuation">.</span><span class="token function">perfReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h2><h3 id="只对存在一定业务逻辑复杂性的代码进行注释"><a href="#只对存在一定业务逻辑复杂性的代码进行注释" class="headerlink" title="只对存在一定业务逻辑复杂性的代码进行注释"></a>只对存在一定业务逻辑复杂性的代码进行注释</h3><p>注释并不是必须的，好的代码是能够让人一目了然，不用过多无谓的注释。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hashIt</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// The hash</span>
  <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token comment">// Length of string</span>
  <span class="token keyword">const</span> length <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token comment">// Loop through every character in data</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Get character code.</span>
    <span class="token keyword">const</span> char <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Make the hash</span>
    hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> hash <span class="token operator">+</span> char<span class="token punctuation">;</span>
    <span class="token comment">// Convert to 32-bit integer</span>
    hash <span class="token operator">&amp;=</span> hash<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">
<span class="token keyword">function</span> <span class="token function">hashIt</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> length <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> char <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hash <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> hash <span class="token operator">+</span> char<span class="token punctuation">;</span>

    <span class="token comment">// Convert to 32-bit integer</span>
    hash <span class="token operator">&amp;=</span> hash<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="不要在代码库中遗留被注释掉的代码"><a href="#不要在代码库中遗留被注释掉的代码" class="headerlink" title="不要在代码库中遗留被注释掉的代码"></a>不要在代码库中遗留被注释掉的代码</h3><p>版本控制的存在是有原因的。让旧代码存在于你的 history 里吧。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// doOtherStuff();</span>
<span class="token comment">// doSomeMoreStuff();</span>
<span class="token comment">// doSoMuchStuff();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h3 id="不需要版本更新类型注释"><a href="#不需要版本更新类型注释" class="headerlink" title="不需要版本更新类型注释"></a>不需要版本更新类型注释</h3><p>记住，我们可以使用版本控制。废代码、被注释的代码及用注释记录代码中的版本更新说明都是没有必要的。</p>
<p>需要时可以使用 <code>git log</code> 获取历史版本。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 2016-12-20: Removed monads, didn't understand them (RM)
 * 2016-10-01: Improved using special monads (JP)
 * 2016-02-03: Removed type-checking (LI)
 * 2015-03-14: Added combine with type-checking (JR)
 */</span>
<span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h3 id="避免位置标记"><a href="#避免位置标记" class="headerlink" title="避免位置标记"></a>避免位置标记</h3><p>这些东西通常只能代码麻烦，采用适当的缩进就可以了。</p>
<p><strong>反例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">////////////////////////////////////////////////////////////////////////////////</span>
<span class="token comment">// Scope Model Instantiation</span>
<span class="token comment">////////////////////////////////////////////////////////////////////////////////</span>
$scope<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  menu<span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>
  nav<span class="token operator">:</span> <span class="token string">"bar"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">////////////////////////////////////////////////////////////////////////////////</span>
<span class="token comment">// Action setup</span>
<span class="token comment">////////////////////////////////////////////////////////////////////////////////</span>
<span class="token keyword">const</span> <span class="token function-variable function">actions</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>正例</strong>:</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$scope<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  menu<span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>
  nav<span class="token operator">:</span> <span class="token string">"bar"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">actions</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
